import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import io
import os
import json
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload

st.set_page_config(layout="wide", page_title="Ph√¢n t√≠ch t·ªïn th·∫•t TBA c√¥ng c·ªông")
st.title("üìä Ph√¢n t√≠ch t·ªïn th·∫•t c√°c TBA c√¥ng c·ªông")

# ================= C·∫§U H√åNH PH√ÇN T√çCH =================
col1, col2, col3 = st.columns(3)
with col1:
    mode = st.radio("Ch·∫ø ƒë·ªô ph√¢n t√≠ch", ["Theo th√°ng", "L≈©y k·∫ø", "So s√°nh c√πng k·ª≥", "L≈©y k·∫ø c√πng k·ª≥"])
with col2:
    thang_from = st.selectbox("T·ª´ th√°ng", list(range(1, 13)), index=0)
    if "L≈©y k·∫ø" in mode:
        thang_to = st.selectbox("ƒê·∫øn th√°ng", list(range(thang_from, 13)), index=4)
    else:
        thang_to = thang_from
with col3:
    nam = st.selectbox("Ch·ªçn nƒÉm", list(range(2020, datetime.now().year + 1))[::-1], index=0)

# ================= THI·∫æT L·∫¨P K·∫æT N·ªêI DRIVE =================
# Corrected path for SERVICE_ACCOUNT_FILE
SERVICE_ACCOUNT_FILE = 'tonthat-2afb015bec9d.json' # Changed from '/mnt/data/tonthat-2afb015bec9d.json'
FOLDER_ID = '165Txi8IyqG50uFSFHzWidSZSG9qpsbaq'

if not os.path.exists(SERVICE_ACCOUNT_FILE):
    st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {SERVICE_ACCOUNT_FILE}. H√£y ch·∫Øc ch·∫Øn ƒë√£ upload ƒë√∫ng file JSON l√™n.")

@st.cache_data
def get_drive_service():
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE,
        scopes=["https://www.googleapis.com/auth/drive"]
    )
    return build('drive', 'v3', credentials=credentials)

@st.cache_data
def list_excel_files():
    service = get_drive_service()
    query = f"'{FOLDER_ID}' in parents and mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'"
    results = service.files().list(q=query, fields="files(id, name)").execute()
    return {f['name']: f['id'] for f in results.get('files', [])}

def download_excel(file_id):
    service = get_drive_service()
    request = service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while done is False:
        _, done = downloader.next_chunk()
    fh.seek(0)
    try:
        return pd.read_excel(fh, sheet_name="d·ªØ li·ªáu")
    except:
        return pd.DataFrame()

def generate_filenames(year, start_month, end_month):
    return [f"TBA_{year}_{str(m).zfill(2)}.xlsx" for m in range(start_month, end_month + 1)]

def load_data(file_list, all_files):
    dfs = []
    for fname in file_list:
        file_id = all_files.get(fname)
        if file_id:
            df = download_excel(file_id)
            if not df.empty:
                dfs.append(df)
    return pd.concat(dfs) if dfs else pd.DataFrame()

# ================= PH√ÇN T√çCH D·ªÆ LI·ªÜU =================
all_files = list_excel_files()

if mode == "Theo th√°ng":
    files = generate_filenames(nam, thang_from, thang_from)
    df = load_data(files, all_files)

elif mode == "L≈©y k·∫ø":
    files = generate_filenames(nam, thang_from, thang_to)
    df = load_data(files, all_files)
    if not df.empty and "T√™n TBA" in df.columns:
        df = df.groupby("T√™n TBA", as_index=False).sum()

elif mode == "So s√°nh c√πng k·ª≥":
    files_now = generate_filenames(nam, thang_from, thang_from)
    files_last = generate_filenames(nam - 1, thang_from, thang_from)
    df_now = load_data(files_now, all_files)
    df_last = load_data(files_last, all_files)
    if not df_now.empty and not df_last.empty:
        df = df_now.merge(df_last, on="T√™n TBA", suffixes=(f"_{nam}", f"_{nam-1}"))
        df["Ch√™nh l·ªách t·ªïn th·∫•t"] = df[f"ƒêi·ªán t·ªïn th·∫•t_{nam}"] - df[f"ƒêi·ªán t·ªïn th·∫•t_{nam-1}"]
    else:
        df = pd.DataFrame()

elif mode == "L≈©y k·∫ø c√πng k·ª≥":
    files_now = generate_filenames(nam, thang_from, thang_to)
    files_last = generate_filenames(nam - 1, thang_from, thang_to)
    df_now = load_data(files_now, all_files)
    df_last = load_data(files_last, all_files)
    if not df_now.empty and not df_last.empty:
        df_now_group = df_now.groupby("T√™n TBA", as_index=False).sum()
        df_last_group = df_last.groupby("T√™n TBA", as_index=False).sum()
        df = df_now_group.merge(df_last_group, on="T√™n TBA", suffixes=(f"_{nam}", f"_{nam-1}"))
        df["Ch√™nh l·ªách t·ªïn th·∫•t"] = df[f"ƒêi·ªán t·ªïn th·∫•t_{nam}"] - df[f"ƒêi·ªán t·ªïn th·∫•t_{nam-1}"]
    else:
        df = pd.DataFrame()

# ================= HI·ªÇN TH·ªä =================
st.markdown("---")
if not df.empty:
    st.dataframe(df, use_container_width=True)
    if "T·ª∑ l·ªá t·ªïn th·∫•t" in df.columns:
        fig, ax = plt.subplots()
        df.plot(kind="bar", x="T√™n TBA", y="T·ª∑ l·ªá t·ªïn th·∫•t", ax=ax)
        ax.set_title("Bi·ªÉu ƒë·ªì t·ª∑ l·ªá t·ªïn th·∫•t c√°c TBA", fontsize=14, fontweight='bold', color='black')
        ax.set_ylabel("T·ª∑ l·ªá t·ªïn th·∫•t (%)", fontsize=12, fontweight='bold', color='black')
        ax.set_xlabel("T√™n TBA", fontsize=12, fontweight='bold', color='black')
        ax.tick_params(axis='x', labelrotation=90, labelcolor='black', labelsize=10)
        ax.tick_params(axis='y', labelcolor='black', labelsize=10)
        st.pyplot(fig)
else:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p ho·∫∑c thi·∫øu file Excel trong th∆∞ m·ª•c Drive.")