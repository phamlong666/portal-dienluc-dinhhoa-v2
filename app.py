import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import numpy as np

st.set_page_config(page_title="B√°o c√°o t·ªïn th·∫•t TBA", layout="wide")
st.title("üì• T·∫£i d·ªØ li·ªáu ƒë·∫ßu v√†o - B√°o c√°o t·ªïn th·∫•t")

st.markdown("### üîç Ch·ªçn lo·∫°i d·ªØ li·ªáu t·ªïn th·∫•t ƒë·ªÉ t·∫£i l√™n:")

# --- Kh·ªüi t·∫°o Session State cho d·ªØ li·ªáu t·∫£i l√™n ---
if 'df_tba_thang' not in st.session_state:
    st.session_state.df_tba_thang = None
if 'df_tba_luyke' not in st.session_state:
    st.session_state.df_tba_luyke = None
if 'df_tba_ck' not in st.session_state:
    st.session_state.df_tba_ck = None
# Th√™m kh·ªüi t·∫°o cho c√°c lo·∫°i d·ªØ li·ªáu kh√°c n·∫øu c·∫ßn


# --- N√∫t "L√†m m·ªõi" ---
if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu"):
    st.session_state.df_tba_thang = None
    st.session_state.df_tba_luyke = None
    st.session_state.df_tba_ck = None
    # ƒê·∫∑t l·∫°i t·∫•t c·∫£ c√°c bi·∫øn Session State kh√°c v·ªÅ None n·∫øu c√≥
    st.experimental_rerun()


# H√†m ph√¢n lo·∫°i t·ªïn th·∫•t theo ng∆∞·ª°ng (di chuy·ªÉn l√™n ƒë·∫ßu ƒë·ªÉ d·ªÖ t√°i s·ª≠ d·ª•ng)
def phan_loai_nghiem(x):
    try:
        x = float(str(x).replace(",", ".")) # Chuy·ªÉn ƒë·ªïi sang string tr∆∞·ªõc khi replace ƒë·ªÉ x·ª≠ l√Ω gi√° tr·ªã NaN
    except (ValueError, AttributeError):
        return "Kh√¥ng r√µ"
    if x < 2:
        return "<2%"
    elif 2 <= x < 3:
        return ">=2 v√† <3%"
    elif 3 <= x < 4:
        return ">=3 v√† <4%"
    elif 4 <= x < 5:
        return ">=4 v√† <5%"
    elif 5 <= x < 7:
        return ">=5 v√† <7%"
    else:
        return ">=7%"

# H√†m x·ª≠ l√Ω DataFrame v√† tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng TBA theo ng∆∞·ª°ng
def process_tba_data(df):
    if df is None:
        return None, None
    df_temp = pd.DataFrame()
    df_temp["T·ª∑ l·ªá t·ªïn th·∫•t"] = df.iloc[:, 14].map(lambda x: f"{x:.2f}".replace(".", ",") if pd.notna(x) else "")
    df_temp["Ng∆∞·ª°ng"] = df_temp["T·ª∑ l·ªá t·ªïn th·∫•t"].apply(phan_loai_nghiem)
    tong_so = len(df_temp)
    tong_theo_nguong = df_temp["Ng∆∞·ª°ng"].value_counts().reindex(["<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"], fill_value=0)
    return tong_so, tong_theo_nguong


# T·∫°o c√°c ti·ªán √≠ch con theo ph√¢n nh√≥m
with st.expander("üîå T·ªïn th·∫•t c√°c TBA c√¥ng c·ªông"):
    temp_upload_tba_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - Theo th√°ng", type=["xlsx"], key="tba_thang")
    if temp_upload_tba_thang:
        st.session_state.df_tba_thang = pd.read_excel(temp_upload_tba_thang, skiprows=6)
        st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA c√¥ng c·ªông theo th√°ng!")

    temp_upload_tba_luyke = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - L≈©y k·∫ø", type=["xlsx"], key="tba_luyke")
    if temp_upload_tba_luyke:
        st.session_state.df_tba_luyke = pd.read_excel(temp_upload_tba_luyke, skiprows=6)
        st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA c√¥ng c·ªông - L≈©y k·∫ø!")

    temp_upload_tba_ck = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - C√πng k·ª≥", type=["xlsx"], key="tba_ck")
    if temp_upload_tba_ck:
        st.session_state.df_tba_ck = pd.read_excel(temp_upload_tba_ck, skiprows=6)
        st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA c√¥ng c·ªông - C√πng k·ª≥!")

# --- X·ª≠ l√Ω v√† hi·ªÉn th·ªã d·ªØ li·ªáu t·ªïng h·ª£p n·∫øu c√≥ √≠t nh·∫•t m·ªôt file ƒë∆∞·ª£c t·∫£i l√™n ---
if st.session_state.df_tba_thang is not None or \
   st.session_state.df_tba_luyke is not None or \
   st.session_state.df_tba_ck is not None:

    st.markdown("### üìä K·∫øt qu·∫£ √°nh x·∫° d·ªØ li·ªáu:")

    # X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ng lo·∫°i v√† chu·∫©n b·ªã cho bi·ªÉu ƒë·ªì
    tong_so_thang, tong_theo_nguong_thang = process_tba_data(st.session_state.df_tba_thang)
    tong_so_luyke, tong_theo_nguong_luyke = process_tba_data(st.session_state.df_tba_luyke)
    tong_so_ck, tong_theo_nguong_ck = process_tba_data(st.session_state.df_tba_ck)

    col1, col2 = st.columns([2,2])

    with col1:
        st.markdown("#### üìä S·ªë l∆∞·ª£ng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t")
        fig_bar = go.Figure()
        colors = ['steelblue', 'darkorange', 'forestgreen', 'goldenrod', 'teal', 'red'] # M√†u s·∫Øc cho t·ª´ng ng∆∞·ª°ng

        # Th√™m c√°c thanh cho "Theo th√°ng"
        if tong_theo_nguong_thang is not None:
            fig_bar.add_trace(go.Bar(
                name='Theo th√°ng',
                x=tong_theo_nguong_thang.index,
                y=tong_theo_nguong_thang.values,
                #marker_color=colors, # N·∫øu mu·ªën m·ªói nh√≥m c√≥ m√†u ri√™ng bi·ªát cho m·ªói c·ªôt
                text=tong_theo_nguong_thang.values,
                textposition='outside',
                textfont=dict(color='black')
            ))

        # Th√™m c√°c thanh cho "L≈©y k·∫ø"
        if tong_theo_nguong_luyke is not None:
            fig_bar.add_trace(go.Bar(
                name='L≈©y k·∫ø',
                x=tong_theo_nguong_luyke.index,
                y=tong_theo_nguong_luyke.values,
                #marker_color=colors,
                text=tong_theo_nguong_luyke.values,
                textposition='outside',
                textfont=dict(color='black')
            ))

        # Th√™m c√°c thanh cho "C√πng k·ª≥"
        if tong_theo_nguong_ck is not None:
            fig_bar.add_trace(go.Bar(
                name='C√πng k·ª≥',
                x=tong_theo_nguong_ck.index,
                y=tong_theo_nguong_ck.values,
                #marker_color=colors,
                text=tong_theo_nguong_ck.values,
                textposition='outside',
                textfont=dict(color='black')
            ))

        fig_bar.update_layout(
            barmode='group', # Hi·ªÉn th·ªã c√°c thanh c·∫°nh nhau
            height=400,
            xaxis_title='Ng∆∞·ª°ng t·ªïn th·∫•t',
            yaxis_title='S·ªë l∆∞·ª£ng TBA',
            margin=dict(l=20, r=20, t=40, b=40),
            legend_title_text='Lo·∫°i d·ªØ li·ªáu'
        )
        st.plotly_chart(fig_bar, use_container_width=True)

    with col2:
        st.markdown("#### üß© T·ª∑ tr·ªçng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t")
        # Bi·ªÉu ƒë·ªì tr√≤n s·∫Ω ph·ª©c t·∫°p h∆°n khi k·∫øt h·ª£p 3 lo·∫°i d·ªØ li·ªáu.
        # Th∆∞·ªùng th√¨ bi·ªÉu ƒë·ªì tr√≤n ch·ªâ hi·ªÉn th·ªã t·ª∑ tr·ªçng c·ªßa M·ªòT t·∫≠p d·ªØ li·ªáu.
        # N·∫øu mu·ªën hi·ªÉn th·ªã 3 bi·ªÉu ƒë·ªì tr√≤n, b·∫°n c√≥ th·ªÉ l√†m nh∆∞ sau:

        if tong_theo_nguong_thang is not None:
            st.markdown(f"##### Theo th√°ng (T·ªïng s·ªë: {tong_so_thang})")
            fig_pie_thang = go.Figure(data=[
                go.Pie(
                    labels=tong_theo_nguong_thang.index,
                    values=tong_theo_nguong_thang.values,
                    hole=0.5,
                    marker=dict(colors=colors),
                    textinfo='percent+label',
                    name='Theo th√°ng'
                )
            ])
            fig_pie_thang.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=40), showlegend=False)
            st.plotly_chart(fig_pie_thang, use_container_width=True)

        if tong_theo_nguong_luyke is not None:
            st.markdown(f"##### L≈©y k·∫ø (T·ªïng s·ªë: {tong_so_luyke})")
            fig_pie_luyke = go.Figure(data=[
                go.Pie(
                    labels=tong_theo_nguong_luyke.index,
                    values=tong_theo_nguong_luyke.values,
                    hole=0.5,
                    marker=dict(colors=colors),
                    textinfo='percent+label',
                    name='L≈©y k·∫ø'
                )
            ])
            fig_pie_luyke.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=40), showlegend=False)
            st.plotly_chart(fig_pie_luyke, use_container_width=True)

        if tong_theo_nguong_ck is not None:
            st.markdown(f"##### C√πng k·ª≥ (T·ªïng s·ªë: {tong_so_ck})")
            fig_pie_ck = go.Figure(data=[
                go.Pie(
                    labels=tong_theo_nguong_ck.index,
                    values=tong_theo_nguong_ck.values,
                    hole=0.5,
                    marker=dict(colors=colors),
                    textinfo='percent+label',
                    name='C√πng k·ª≥'
                )
            ])
            fig_pie_ck.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=40), showlegend=False)
            st.plotly_chart(fig_pie_ck, use_container_width=True)


    # Hi·ªÉn th·ªã DataFrame √°nh x·∫° cho file "Theo th√°ng" n·∫øu n√≥ t·ªìn t·∫°i
    if st.session_state.df_tba_thang is not None:
        st.markdown("##### D·ªØ li·ªáu TBA c√¥ng c·ªông - Theo th√°ng:")
        df_test = st.session_state.df_tba_thang
        df_result = pd.DataFrame()
        df_result["STT"] = range(1, len(df_test) + 1)
        df_result["T√™n TBA"] = df_test.iloc[:, 2]
        df_result["C√¥ng su·∫•t"] = df_test.iloc[:, 3]
        df_result["ƒêi·ªán nh·∫≠n"] = df_test.iloc[:, 6]
        df_result["Th∆∞∆°ng ph·∫©m"] = df_test.iloc[:, 6] - df_test.iloc[:, 7]
        df_result["ƒêi·ªán t·ªïn th·∫•t"] = df_test.iloc[:, 13].round(0).astype("Int64")
        df_result["T·ª∑ l·ªá t·ªïn th·∫•t"] = df_test.iloc[:, 14].map(lambda x: f"{x:.2f}".replace(".", ",") if pd.notna(x) else "")
        df_result["K·∫ø ho·∫°ch"] = df_test.iloc[:, 15].map(lambda x: f"{x:.2f}".replace(".", ",") if pd.notna(x) else "")
        df_result["So s√°nh"] = df_test.iloc[:, 16].map(lambda x: f"{x:.2f}".replace(".", ",") if pd.notna(x) else "")
        st.dataframe(df_result)

    # B·∫°n c√≥ th·ªÉ th√™m hi·ªÉn th·ªã DataFrame √°nh x·∫° cho L≈©y k·∫ø v√† C√πng k·ª≥ t∆∞∆°ng t·ª± ·ªü ƒë√¢y
    # if st.session_state.df_tba_luyke is not None:
    #     st.markdown("##### D·ªØ li·ªáu TBA c√¥ng c·ªông - L≈©y k·∫ø:")
    #     # ... x·ª≠ l√Ω v√† hi·ªÉn th·ªã df_result cho l≈©y k·∫ø
    #     st.dataframe(df_result_luyke)

    # if st.session_state.df_tba_ck is not None:
    #     st.markdown("##### D·ªØ li·ªáu TBA c√¥ng c·ªông - C√πng k·ª≥:")
    #     # ... x·ª≠ l√Ω v√† hi·ªÉn th·ªã df_result cho c√πng k·ª≥
    #     st.dataframe(df_result_ck)


with st.expander("‚ö° T·ªïn th·∫•t h·∫° th·∫ø"):
    upload_ha_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu h·∫° √°p - Theo th√°ng", type=["xlsx"], key="ha_thang")
    upload_ha_luyke = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu h·∫° √°p - L≈©y k·∫ø", type=["xlsx"], key="ha_luyke")
    upload_ha_ck = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu h·∫° √°p - C√πng k·ª≥", type=["xlsx"], key="ha_ck")

with st.expander("‚ö° T·ªïn th·∫•t trung th·∫ø"):
    upload_trung_thang_tt = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu Trung √°p - Theo th√°ng", type=["xlsx"], key="trung_thang_tt")
    upload_trung_luyke_tt = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu Trung √°p - L≈©y k·∫ø", type=["xlsx"], key="trung_luyke_tt")
    upload_trung_ck_tt = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu Trung √°p - C√πng k·ª≥", type=["xlsx"], key="trung_ck_tt")

with st.expander("‚ö° T·ªïn th·∫•t c√°c ƒë∆∞·ªùng d√¢y trung th·∫ø"):
    upload_trung_thang_dy = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu Trung √°p - Theo th√°ng", type=["xlsx"], key="trung_thang_dy")
    upload_trung_luyke_dy = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu Trung √°p - L≈©y k·∫ø", type=["xlsx"], key="trung_luyke_dy")
    upload_trung_ck_dy = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu Trung √°p - C√πng k·ª≥", type=["xlsx"], key="trung_ck_dy")

with st.expander("üè¢ T·ªïn th·∫•t to√†n ƒë∆°n v·ªã"):
    upload_dv_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu ƒê∆°n v·ªã - Theo th√°ng", type=["xlsx"], key="dv_thang")
    upload_dv_luyke = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu ƒê∆°n v·ªã - L≈©y k·∫ø", type=["xlsx"], key="dv_luyke")
    upload_dv_ck = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu ƒê∆°n v·ªã - C√πng k·ª≥", type=["xlsx"], key="dv_ck")