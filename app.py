<style>
    html, body, [class*="css"]  {
        font-size: 1.8em !important;
    }
</style>

import streamlit as st
import pandas as pd
import math
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import st_folium
from datetime import datetime
import zipfile
import xml.etree.ElementTree as ET
import json
import os
import io

st.set_page_config(layout="wide")
st.markdown("<style>html, body, [class*='css']  {font-size: 1.8em !important;}</style>", unsafe_allow_html=True)
st.title("üìç D·ª± b√°o ƒëi·ªÉm s·ª± c·ªë")

# ==============================
# (ph·∫ßn n·ªôi dung gi·ªØ nguy√™n sau d√≤ng n√†y...)

m = None  # kh·ªüi t·∫°o b·∫£n ƒë·ªì ƒë·ªÉ gh√©p c√°c PT l√™n chung
pt_markers = []

# ==============================
# 4. D·ª∞ B√ÅO V·ªä TR√ç S·ª∞ C·ªê THEO PH∆Ø∆†NG √ÅN [PT3] - T·ªîNG TR·ªû
# ==============================
st.subheader("üßÆ [PT3] D·ª± b√°o theo t·ªïng tr·ªü v√† d√≤ng s·ª± c·ªë")

st.markdown("üëâ Nh·∫≠p t√™n ƒë∆∞·ªùng d√¢y v√† d√≤ng s·ª± c·ªë ƒë·ªÉ t√≠nh to√°n kho·∫£ng c√°ch ƒë·∫øn ƒëi·ªÉm s·ª± c·ªë.")

col1, col2 = st.columns(2)
with col1:
    ten_duongday = st.text_input("üîå Nh·∫≠p t√™n ƒë∆∞·ªùng d√¢y (v√≠ d·ª•: 471 E6.22)")
with col2:
    dong_suco_pt3 = st.text_input("üìà Nh·∫≠p d√≤ng s·ª± c·ªë (v√≠ d·ª•: Ia=1032; Ib=928; Ic=112)")

uploaded_qlkt = st.file_uploader("üìé T·∫£i file ch·ª©a sheet QLKT (Excel)", type="xlsx")

if st.button("üìä Ph√¢n t√≠ch t·ªïng tr·ªü") and uploaded_qlkt and ten_duongday and dong_suco_pt3:
    try:
        df_qlkt = pd.read_excel(uploaded_qlkt, sheet_name="QLKT")
        row = df_qlkt[df_qlkt["T√™n ƒë∆∞·ªùng d√¢y"].astype(str).str.contains(ten_duongday, case=False)]
        if not row.empty:
            chieu_dai_km = float(row.iloc[0]["File/s·ªë li·ªáu ƒë√£ g·ª≠i"].split("chi·ªÅu d√†i ")[1].split("km")[0].strip())
            chieu_dai_m = chieu_dai_km * 1000
            tiet_dien = 70  # gi·∫£ ƒë·ªãnh d√¢y AC70
            dien_tro_suat = 0.028  # Œ©¬∑mm¬≤/m (nh√¥m)
            z = round(dien_tro_suat * chieu_dai_m / tiet_dien, 2)

            dong_raw = dong_suco_pt3.replace(';', ' ').replace(',', ' ')
            dong_raw = dong_raw.replace('Ia=', '').replace('Ib=', '').replace('Ic=', '')
            values = [float(s.strip()) for s in dong_raw.split() if s.strip().replace('.', '', 1).isdigit()]

            if len(values) >= 3:
                tong_dong = sum(values[:3])
                u_dinh_muc = 22000  # 22kV
                kc_m = round((u_dinh_muc / tong_dong) * z, 2)
                so_cot = int(kc_m // 80)

                st.success(f"üìè T·ªïng tr·ªü Z = {z} Œ© | D√≤ng s·ª± c·ªë: {tong_dong} A")
                st.info(f"üìå D·ª± b√°o kho·∫£ng c√°ch ƒë·∫øn ƒëi·ªÉm s·ª± c·ªë: {kc_m} m ‚Üí kho·∫£ng c·ªôt th·ª© {so_cot}")

                # Th√™m marker PT3 v√†o b·∫£n ƒë·ªì chung
                if marker_locations:
                    for name, (lat, lon) in marker_locations.items():
                        if ten_duongday.replace(' ', '').split('.')[0][-3:] in name:
                            pt_markers.append((lat, lon, f"[PT3] C·ªôt g·∫ßn {so_cot}"))
                            break

                # Kh·ªüi t·∫°o b·∫£n ƒë·ªì n·∫øu ch∆∞a c√≥
                if not m and pt_markers:
                    m = folium.Map(location=pt_markers[0][:2], zoom_start=14)

                # G·∫Øn t·∫•t c·∫£ marker PT v√†o b·∫£n ƒë·ªì
                for lat, lon, label in pt_markers:
                    folium.Marker(
                        location=[lat, lon],
                        popup=label,
                        icon=folium.Icon(color='green')
                    ).add_to(m)

                if m:
                    st_folium(m, width=900, height=500)
            else:
                st.warning("‚ö†Ô∏è D·ªØ li·ªáu d√≤ng s·ª± c·ªë ch∆∞a ƒë·ªß ƒë·ªÉ t√≠nh to√°n")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆∞·ªùng d√¢y trong sheet QLKT")
    except Exception as e:
        st.error(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")
