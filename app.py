import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import numpy as np
import os # Import os module to handle file paths

st.set_page_config(page_title="B√°o c√°o t·ªïn th·∫•t TBA", layout="wide")
st.title("üì• AI_Tr·ª£ l√Ω t·ªïn th·∫•t")

st.markdown("### üîç Ch·ªçn lo·∫°i d·ªØ li·ªáu t·ªïn th·∫•t ƒë·ªÉ t·∫£i l√™n:")

# --- Kh·ªüi t·∫°o Session State cho d·ªØ li·ªáu t·∫£i l√™n ---
if 'df_tba_thang' not in st.session_state:
    st.session_state.df_tba_thang = None
if 'df_tba_luyke' not in st.session_state:
    st.session_state.df_tba_luyke = None
if 'df_tba_ck' not in st.session_state:
    st.session_state.df_tba_ck = None
if 'df_ha_thang' not in st.session_state:
    st.session_state.df_ha_thang = None
if 'df_ha_luyke' not in st.session_state:
    st.session_state.df_ha_luyke = None
if 'df_ha_ck' not in st.session_state:
    st.session_state.df_ha_ck = None
if 'df_trung_thang_tt' not in st.session_state:
    st.session_state.df_trung_thang_tt = None
if 'df_trung_luyke_tt' not in st.session_state:
    st.session_state.df_trung_ck_tt = None # This also seems like a typo, should be df_trung_luyke_tt
if 'df_trung_thang_dy' not in st.session_state:
    st.session_state.df_trung_thang_dy = None
if 'df_trung_luyke_dy' not in st.session_state:
    st.session_state.df_trung_luyke_dy = None
if 'df_trung_ck_dy' not in st.session_state:
    st.session_state.df_trung_ck_dy = None
if 'df_dv_thang' not in st.session_state:
    st.session_state.df_dv_thang = None
if 'df_dv_luyke' not in st.session_state:
    st.session_state.df_dv_luyke = None
if 'df_dv_ck' not in st.session_state:
    st.session_state.df_dv_ck = None


# H√†m ph√¢n lo·∫°i t·ªïn th·∫•t theo ng∆∞·ª°ng
def phan_loai_nghiem(x):
    try:
        x = float(str(x).replace(",", "."))
    except (ValueError, AttributeError):
        return "Kh√¥ng r√µ"
    if x < 2:
        return "<2%"
    elif 2 <= x < 3:
        return ">=2 v√† <3%"
    elif 3 <= x < 4:
        return ">=3 v√† <4%"
    elif 4 <= x < 5:
        return ">=4 v√† <5%"
    elif 5 <= x < 7:
        return ">=5 v√† <7%"
    else:
        return ">=7%"

# H√†m x·ª≠ l√Ω DataFrame v√† tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng TBA theo ng∆∞·ª°ng
def process_tba_data(df):
    if df is None:
        return None, None
    df_temp = pd.DataFrame()

    # ∆Øu ti√™n t√¨m c·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' theo t√™n
    # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ 'T·ª∑ l·ªá t·ªïn th·∫•t (%)' (v√≠ d·ª• t·ª´ file m·∫´u)
    # N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, ki·ªÉm tra ch·ªâ s·ªë c·ªôt 14 nh∆∞ fallback cu·ªëi c√πng
    loss_rate_col_found = False
    if 'T·ª∑ l·ªá t·ªïn th·∫•t' in df.columns:
        df_temp["T·ª∑ l·ªá t·ªïn th·∫•t"] = df['T·ª∑ l·ªá t·ªïn th·∫•t'].map(lambda x: f"{x:.2f}".replace(".", ",") if pd.notna(x) else "")
        loss_rate_col_found = True
    elif 'T·ª∑ l·ªá t·ªïn th·∫•t (%)' in df.columns: # Gi·∫£ ƒë·ªãnh m·ªôt t√™n c·ªôt kh√°c c√≥ th·ªÉ c√≥
        df_temp["T·ª∑ l·ªá t·ªïn th·∫•t"] = df['T·ª∑ l·ªá t·ªïn th·∫•t (%)'].map(lambda x: f"{x:.2f}".replace(".", ",") if pd.notna(x) else "")
        loss_rate_col_found = True
    elif df.shape[1] > 14: # fallback to index 14 (15th column)
        # C·∫£nh b√°o: S·ª≠ d·ª•ng iloc c√≥ th·ªÉ kh√¥ng ·ªïn ƒë·ªãnh n·∫øu th·ª© t·ª± c·ªôt thay ƒë·ªïi
        st.warning("C·∫£nh b√°o: C·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' kh√¥ng t√¨m th·∫•y theo t√™n. ƒêang s·ª≠ d·ª•ng c·ªôt th·ª© 15 (ch·ªâ s·ªë 14) l√†m 'T·ª∑ l·ªá t·ªïn th·∫•t'. Vui l√≤ng ki·ªÉm tra file Excel ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c.")
        df_temp["T·ª∑ l·ªá t·ªïn th·∫•t"] = df.iloc[:, 14].map(lambda x: f"{x:.2f}".replace(".", ",") if pd.notna(x) else "")
        loss_rate_col_found = True
    else:
        st.error("L·ªói: File Excel kh√¥ng c√≥ c·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' (theo t√™n ho·∫∑c theo ch·ªâ s·ªë 14). Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file v√† sheet 'd·ªØ li·ªáu' c·ªßa b·∫°n.")
        return None, None

    if not loss_rate_col_found:
        return None, None # Kh√¥ng c√≥ c·ªôt t·ª∑ l·ªá t·ªïn th·∫•t, kh√¥ng th·ªÉ x·ª≠ l√Ω

    df_temp["Ng∆∞·ª°ng"] = df_temp["T·ª∑ l·ªá t·ªïn th·∫•t"].apply(phan_loai_nghiem)
    tong_so = len(df_temp)
    tong_theo_nguong = df_temp["Ng∆∞·ª°ng"].value_counts().reindex(["<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"], fill_value=0)
    return tong_so, tong_theo_nguong

# --- ƒê·∫∑t c√°c n√∫t "L√†m m·ªõi d·ªØ li·ªáu" v√† "T·∫£i file m·∫´u" c·∫°nh nhau ---
col_refresh, col_download_folder = st.columns([1, 1])

with col_refresh:
    if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu"):
        st.session_state.df_tba_thang = None
        st.session_state.df_tba_luyke = None
        st.session_state.df_tba_ck = None
        st.session_state.df_ha_thang = None
        st.session_state.df_ha_luyke = None
        st.session_state.df_ha_ck = None
        st.session_state.df_trung_thang_tt = None
        st.session_state.df_trung_luyke_tt = None
        st.session_state.df_trung_ck_tt = None
        st.session_state.df_trung_thang_dy = None
        st.session_state.df_trung_luyke_dy = None
        st.session_state.df_trung_ck_dy = None
        st.session_state.df_dv_thang = None
        st.session_state.df_dv_luyke = None
        st.session_state.df_dv_ck = None
        st.experimental_rerun()

with col_download_folder:
    with st.expander("üìÅ T·∫£i file m·∫´u"):
        st.markdown("B·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng c√°c file Excel m·∫´u d∆∞·ªõi ƒë√¢y ƒë·ªÉ s·ª≠ d·ª•ng v·ªõi ch∆∞∆°ng tr√¨nh:")

        # ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a file m·∫´u
        template_folder = "templates"

        # ƒê·∫£m b·∫£o th∆∞ m·ª•c templates t·ªìn t·∫°i
        if not os.path.exists(template_folder):
            st.warning(f"Th∆∞ m·ª•c '{template_folder}' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng t·∫°o th∆∞ m·ª•c n√†y v√† ƒë·∫∑t c√°c file m·∫´u v√†o ƒë√≥.")
        else:
            # L·∫∑p qua c√°c file trong th∆∞ m·ª•c templates v√† t·∫°o n√∫t download
            for filename in os.listdir(template_folder):
                if filename.endswith(".xlsx"): # Ch·ªâ hi·ªÉn th·ªã c√°c file Excel
                    file_path = os.path.join(template_folder, filename)
                    with open(file_path, "rb") as file:
                        st.download_button(
                            label=f"T·∫£i xu·ªëng {filename}",
                            data=file,
                            file_name=filename,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key=f"download_{filename}"
                        )


# T·∫°o c√°c ti·ªán √≠ch con theo ph√¢n nh√≥m
with st.expander("üîå T·ªïn th·∫•t c√°c TBA c√¥ng c·ªông"):
    temp_upload_tba_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - Theo th√°ng", type=["xlsx"], key="tba_thang")
    if temp_upload_tba_thang:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_tba_thang = pd.read_excel(temp_upload_tba_thang, sheet_name="d·ªØ li·ªáu")
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA c√¥ng c·ªông theo th√°ng!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_tba_thang = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file: {e}")
            st.session_state.df_tba_thang = None


    temp_upload_tba_luyke = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - L≈©y k·∫ø", type=["xlsx"], key="tba_luyke")
    if temp_upload_tba_luyke:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_tba_luyke = pd.read_excel(temp_upload_tba_luyke, sheet_name="d·ªØ li·ªáu")
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA c√¥ng c·ªông - L≈©y k·∫ø!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet.")
            st.session_state.df_tba_luyke = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file L≈©y k·∫ø: {e}")
            st.session_state.df_tba_luyke = None

    temp_upload_tba_ck = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - C√πng k·ª≥", type=["xlsx"], key="tba_ck")
    if temp_upload_tba_ck:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_tba_ck = pd.read_excel(temp_upload_tba_ck, sheet_name="d·ªØ li·ªáu")
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA c√¥ng c·ªông - C√πng k·ª≥!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet.")
            st.session_state.df_tba_ck = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file C√πng k·ª≥: {e}")
            st.session_state.df_tba_ck = None


# --- X·ª≠ l√Ω v√† hi·ªÉn th·ªã d·ªØ li·ªáu t·ªïng h·ª£p n·∫øu c√≥ √≠t nh·∫•t m·ªôt file ƒë∆∞·ª£c t·∫£i l√™n ---
if st.session_state.df_tba_thang is not None or \
   st.session_state.df_tba_luyke is not None or \
   st.session_state.df_tba_ck is not None:

    st.markdown("### üìä K·∫øt qu·∫£ √°nh x·∫° d·ªØ li·ªáu:")

    # X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ng lo·∫°i v√† chu·∫©n b·ªã cho bi·ªÉu ƒë·ªì
    tong_so_thang, tong_theo_nguong_thang = process_tba_data(st.session_state.df_tba_thang)
    tong_so_luyke, tong_theo_nguong_luyke = process_tba_data(st.session_state.df_tba_luyke)
    tong_so_ck, tong_theo_nguong_ck = process_tba_data(st.session_state.df_tba_ck)

    col1, col2 = st.columns([2,2])

    with col1:
        st.markdown("#### üìä S·ªë l∆∞·ª£ng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t")
        fig_bar = go.Figure()
        colors = ['steelblue', 'darkorange', 'forestgreen', 'goldenrod', 'teal', 'red'] # M√†u s·∫Øc cho t·ª´ng ng∆∞·ª°ng

        # Th√™m c√°c thanh cho "Theo th√°ng"
        if tong_theo_nguong_thang is not None:
            fig_bar.add_trace(go.Bar(
                name='Theo th√°ng',
                x=tong_theo_nguong_thang.index,
                y=tong_theo_nguong_thang.values,
                text=tong_theo_nguong_thang.values,
                textposition='outside',
                textfont=dict(color='black', size=13, family='Arial')
            ))

        # Th√™m c√°c thanh cho "L≈©y k·∫ø"
        if tong_theo_nguong_luyke is not None:
            fig_bar.add_trace(go.Bar(
                name='L≈©y k·∫ø',
                x=tong_theo_nguong_luyke.index,
                y=tong_theo_nguong_luyke.values,
                text=tong_theo_nguong_luyke.values,
                textposition='outside',
                textfont=dict(color='black', size=13, family='Arial')
            ))

        # Th√™m c√°c thanh cho "C√πng k·ª≥"
        if tong_theo_nguong_ck is not None:
            fig_bar.add_trace(go.Bar(
                name='C√πng k·ª≥',
                x=tong_theo_nguong_ck.index,
                y=tong_theo_nguong_ck.values,
                text=tong_theo_nguong_ck.values,
                textposition='outside',
                textfont=dict(color='black', size=13, family='Arial')
            ))

        fig_bar.update_layout(
    xaxis=dict(title_font=dict(color='black', size=14, family='Arial',), tickfont=dict(color='black', size=13, family='Arial')),
    yaxis=dict(title_font=dict(color='black', size=14, family='Arial'), tickfont=dict(color='black', size=13, family='Arial')),
            barmode='group',
            height=400,
            xaxis_title='Ng∆∞·ª°ng t·ªïn th·∫•t',
            yaxis_title='S·ªë l∆∞·ª£ng TBA',
            margin=dict(l=20, r=20, t=40, b=40),
            legend_title_text='Lo·∫°i d·ªØ li·ªáu'
        )
        st.plotly_chart(fig_bar, use_container_width=True)

    with col2:
        st.markdown("#### üß© T·ª∑ tr·ªçng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t")

        if tong_theo_nguong_thang is not None:
            st.markdown(f"##### Theo th√°ng (T·ªïng s·ªë: {tong_so_thang})")
            fig_pie_thang = go.Figure(data=[
                go.Pie(
                    labels=tong_theo_nguong_thang.index,
                    values=tong_theo_nguong_thang.values,
                    hole=0.5,
                    marker=dict(colors=colors),
                    textinfo='percent+label', textfont=dict(color='black', size=13, family='Arial'),
                    name='Theo th√°ng'
                )
            ])
            fig_pie_thang.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=40), showlegend=False)
            st.plotly_chart(fig_pie_thang, use_container_width=True)

        if tong_theo_nguong_luyke is not None:
            st.markdown(f"##### L≈©y k·∫ø (T·ªïng s·ªë: {tong_so_luyke})")
            fig_pie_luyke = go.Figure(data=[
                go.Pie(
                    labels=tong_theo_nguong_luyke.index,
                    values=tong_theo_nguong_luyke.values,
                    hole=0.5,
                    marker=dict(colors=colors),
                    textinfo='percent+label', textfont=dict(color='black', size=13, family='Arial'),
                    name='L≈©y k·∫ø'
                )
            ])
            fig_pie_luyke.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=40), showlegend=False)
            st.plotly_chart(fig_pie_luyke, use_container_width=True)

        if tong_theo_nguong_ck is not None:
            st.markdown(f"##### C√πng k·ª≥ (T·ªïng s·ªë: {tong_so_ck})")
            fig_pie_ck = go.Figure(data=[
                go.Pie(
                    labels=tong_theo_nguong_ck.index,
                    values=tong_theo_nguong_ck.values,
                    hole=0.5,
                    marker=dict(colors=colors),
                    textinfo='percent+label', textfont=dict(color='black', size=13, family='Arial'),
                    name='C√πng k·ª≥'
                )
            ])
            fig_pie_ck.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=40), showlegend=False)
            st.plotly_chart(fig_pie_ck, use_container_width=True)


    # Hi·ªÉn th·ªã DataFrame √°nh x·∫° cho file "Theo th√°ng" n·∫øu n√≥ t·ªìn t·∫°i
    if st.session_state.df_tba_thang is not None:
        st.markdown("##### D·ªØ li·ªáu TBA c√¥ng c·ªông - Theo th√°ng:")
        df_test = st.session_state.df_tba_thang
        df_result = pd.DataFrame()

        # Gi·∫£ ƒë·ªãnh t√™n c·ªôt CH√çNH X√ÅC trong "d·ªØ li·ªáu"
        # C√°c t√™n c·ªôt n√†y C·∫¶N PH·∫¢I kh·ªõp ch√≠nh x√°c v·ªõi ti√™u ƒë·ªÅ trong file Excel c·ªßa b·∫°n
        expected_cols = {
            "T√™n TBA": "T√™n TBA",
            "C√¥ng su·∫•t": "C√¥ng su·∫•t",
            "ƒêi·ªán nh·∫≠n": "ƒêi·ªán nh·∫≠n",
            "ƒêi·ªán th∆∞∆°ng ph·∫©m": "ƒêi·ªán th∆∞∆°ng ph·∫©m", # C·ªôt n√†y d√πng ƒë·ªÉ t√≠nh Th∆∞∆°ng ph·∫©m
            "ƒêi·ªán t·ªïn th·∫•t": "ƒêi·ªán t·ªïn th·∫•t", # C·ªôt n√†y l√† gi√° tr·ªã t·ªïn th·∫•t hi·ªÉn th·ªã
            "T·ª∑ l·ªá t·ªïn th·∫•t": "T·ª∑ l·ªá t·ªïn th·∫•t", # ho·∫∑c 'T·ª∑ l·ªá t·ªïn th·∫•t (%)'
            "K·∫ø ho·∫°ch": "K·∫ø ho·∫°ch",
            "So s√°nh": "So s√°nh"
        }

        # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c c·ªôt c·∫ßn thi·∫øt
        missing_cols = [col_name for df_col_name, col_name in expected_cols.items() if col_name not in df_test.columns]

        # ƒêi·ªÅu ch·ªânh t√™n c·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' n·∫øu trong Excel l√† 'T·ª∑ l·ªá t·ªïn th·∫•t (%)'
        if 'T·ª∑ l·ªá t·ªïn th·∫•t' not in df_test.columns and 'T·ª∑ l·ªá t·ªïn th·∫•t (%)' in df_test.columns:
            expected_cols['T·ª∑ l·ªá t·ªïn th·∫•t'] = 'T·ª∑ l·ªá t·ªïn th·∫•t (%)'
            missing_cols = [col_name for df_col_name, col_name in expected_cols.items() if col_name not in df_test.columns]


        if missing_cols:
            st.warning(f"D·ªØ li·ªáu TBA c√¥ng c·ªông - Theo th√°ng: Thi·∫øu c√°c c·ªôt sau ƒë·ªÉ √°nh x·∫°: {', '.join(missing_cols)}. Vui l√≤ng ki·ªÉm tra c·∫•u tr√∫c sheet 'd·ªØ li·ªáu'.")
        else:
            try:
                df_result["STT"] = range(1, len(df_test) + 1)
                df_result["T√™n TBA"] = df_test[expected_cols["T√™n TBA"]]
                df_result["C√¥ng su·∫•t"] = df_test[expected_cols["C√¥ng su·∫•t"]]
                df_result["ƒêi·ªán nh·∫≠n"] = df_test[expected_cols["ƒêi·ªán nh·∫≠n"]]

                # C·∫ßn ƒë·∫£m b·∫£o c·∫£ hai c·ªôt ƒë·ªÅu t·ªìn t·∫°i ƒë·ªÉ t√≠nh to√°n Th∆∞∆°ng ph·∫©m
                if expected_cols["ƒêi·ªán nh·∫≠n"] in df_test.columns and expected_cols["ƒêi·ªán th∆∞∆°ng ph·∫©m"] in df_test.columns:
                     df_result["Th∆∞∆°ng ph·∫©m"] = df_test[expected_cols["ƒêi·ªán nh·∫≠n"]] - df_test[expected_cols["ƒêi·ªán th∆∞∆°ng ph·∫©m"]]
                else:
                    df_result["Th∆∞∆°ng ph·∫©m"] = np.nan # Ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√°c n·∫øu kh√¥ng ƒë·ªß c·ªôt
                    st.warning("Kh√¥ng ƒë·ªß c·ªôt ƒë·ªÉ t√≠nh Th∆∞∆°ng ph·∫©m. ƒê·∫£m b·∫£o c√≥ c·ªôt 'ƒêi·ªán nh·∫≠n' v√† 'ƒêi·ªán th∆∞∆°ng ph·∫©m'.")

                df_result["ƒêi·ªán t·ªïn th·∫•t"] = df_test[expected_cols["ƒêi·ªán t·ªïn th·∫•t"]].round(0).astype("Int64", errors='ignore')
                df_result["T·ª∑ l·ªá t·ªïn th·∫•t"] = df_test[expected_cols["T·ª∑ l·ªá t·ªïn th·∫•t"]].map(lambda x: f"{x:.2f}".replace(".", ",") if pd.notna(x) else "")
                df_result["K·∫ø ho·∫°ch"] = df_test[expected_cols["K·∫ø ho·∫°ch"]].map(lambda x: f"{x:.2f}".replace(".", ",") if pd.notna(x) else "")
                df_result["So s√°nh"] = df_test[expected_cols["So s√°nh"]].map(lambda x: f"{x:.2f}".replace(".", ",") if pd.notna(x) else "")
                
                df_result["Ng∆∞·ª°ng"] = df_test[expected_cols["T·ª∑ l·ªá t·ªïn th·∫•t"]].map(lambda x: phan_loai_nghiem(x))
                nguong_options = ["T·∫•t c·∫£", "<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"]
                
                # Hi·ªÉn th·ªã selectbox l·ªçc ngay ph√≠a tr√™n dataframe
                chon_nguong = st.selectbox("üéØ L·ªçc theo ng∆∞·ª°ng t·ªïn th·∫•t:", nguong_options, key="tba_thang_nguong_filter") 
                
                if chon_nguong != "T·∫•t c·∫£":
                    df_result = df_result[df_result["Ng∆∞·ª°ng"] == chon_nguong]
                
                df_result["Ng∆∞·ª°ng"] = pd.Categorical(df_result["Ng∆∞·ª°ng"], categories=["<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"], ordered=True)

                st.dataframe(df_result, use_container_width=True) # Ensure it uses full width
            except KeyError as e:
                st.error(f"L·ªói khi √°nh x·∫° d·ªØ li·ªáu: Kh√¥ng t√¨m th·∫•y c·ªôt c·∫ßn thi·∫øt '{e}'. Vui l√≤ng ki·ªÉm tra t√™n c·ªôt trong file Excel c·ªßa b·∫°n tr√™n sheet 'd·ªØ li·ªáu'.")
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi hi·ªÉn th·ªã DataFrame: {e}")


with st.expander("‚ö° T·ªïn th·∫•t h·∫° th·∫ø"):
    upload_ha_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu h·∫° √°p - Theo th√°ng", type=["xlsx"], key="ha_thang")
    if upload_ha_thang:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_ha_thang = pd.read_excel(upload_ha_thang, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t h·∫° √°p - Theo th√°ng!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet h·∫° √°p theo th√°ng: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_ha_thang = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file h·∫° √°p theo th√°ng: {e}")
            st.session_state.df_ha_thang = None

    upload_ha_luyke = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu h·∫° √°p - L≈©y k·∫ø", type=["xlsx"], key="ha_luyke")
    if upload_ha_luyke:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_ha_luyke = pd.read_excel(upload_ha_luyke, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t h·∫° √°p - L≈©y k·∫ø!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet h·∫° √°p l≈©y k·∫ø: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_ha_luyke = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file h·∫° √°p l≈©y k·∫ø: {e}")
            st.session_state.df_ha_luyke = None

    upload_ha_ck = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu h·∫° √°p - C√πng k·ª≥", type=["xlsx"], key="ha_ck")
    if upload_ha_ck:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_ha_ck = pd.read_excel(upload_ha_ck, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t h·∫° √°p - C√πng k·ª≥!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet h·∫° √°p c√πng k·ª≥: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_ha_ck = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file h·∫° √°p c√πng k·ª≥: {e}")
            st.session_state.df_ha_ck = None


with st.expander("‚ö° T·ªïn th·∫•t trung th·∫ø (TBA Trung th·∫ø)"): # ƒê·ªïi t√™n hi·ªÉn th·ªã cho r√µ r√†ng
    upload_trung_thang_tt = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu TBA Trung √°p - Theo th√°ng", type=["xlsx"], key="trung_thang_tt")
    if upload_trung_thang_tt:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_trung_thang_tt = pd.read_excel(upload_trung_thang_tt, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA Trung √°p (Trung th·∫ø) - Theo th√°ng!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet trung √°p (TT) theo th√°ng: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_thang_tt = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file trung √°p (TT) theo th√°ng: {e}")
            st.session_state.df_trung_thang_tt = None

    upload_trung_luyke_tt = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu TBA Trung √°p - L≈©y k·∫ø", type=["xlsx"], key="trung_luyke_tt")
    if upload_trung_luyke_tt:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_trung_luyke_tt = pd.read_excel(upload_trung_luyke_tt, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA Trung √°p (Trung th·∫ø) - L≈©y k·∫ø!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet trung √°p (TT) l≈©y k·∫ø: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_luyke_tt = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file trung √°p (TT) l≈©y k·∫ø: {e}")
            st.session_state.df_trung_luyke_tt = None

    upload_trung_ck_tt = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu TBA Trung √°p - C√πng k·ª≥", type=["xlsx"], key="trung_ck_tt")
    if upload_trung_ck_tt:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_trung_ck_tt = pd.read_excel(upload_trung_ck_tt, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA Trung √°p (Trung th·∫ø) - C√πng k·ª≥!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet trung √°p (TT) c√πng k·ª≥: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_ck_tt = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file trung √°p (TT) c√πng k·ª≥: {e}")
            st.session_state.df_trung_ck_tt = None


with st.expander("‚ö° T·ªïn th·∫•t c√°c ƒë∆∞·ªùng d√¢y trung th·∫ø"):
    upload_trung_thang_dy = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu ƒê∆∞·ªùng d√¢y Trung th·∫ø - Theo th√°ng", type=["xlsx"], key="trung_thang_dy")
    if upload_trung_thang_dy:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_trung_thang_dy = pd.read_excel(upload_trung_thang_dy, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t ƒê∆∞·ªùng d√¢y Trung th·∫ø - Theo th√°ng!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆∞·ªùng d√¢y trung th·∫ø theo th√°ng: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_thang_dy = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆∞·ªùng d√¢y trung th·∫ø theo th√°ng: {e}")
            st.session_state.df_trung_thang_dy = None

    upload_trung_luyke_dy = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu ƒê∆∞·ªùng d√¢y Trung th·∫ø - L≈©y k·∫ø", type=["xlsx"], key="trung_luyke_dy")
    if upload_trung_luyke_dy:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_trung_luyke_dy = pd.read_excel(upload_trung_luyke_dy, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t ƒê∆∞·ªùng d√¢y Trung th·∫ø - L≈©y k·∫ø!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆∞·ªùng d√¢y trung th·∫ø l≈©y k·∫ø: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_luyke_dy = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆∞·ªùng d√¢y trung th·∫ø l≈©y k·∫ø: {e}")
            st.session_state.df_trung_luyke_dy = None

    upload_trung_ck_dy = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu ƒê∆∞·ªùng d√¢y Trung th·∫ø - C√πng k·ª≥", type=["xlsx"], key="trung_ck_dy")
    if upload_trung_ck_dy:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_trung_ck_dy = pd.read_excel(upload_trung_ck_dy, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t ƒê∆∞·ªùng d√¢y Trung th·∫ø - C√πng k·ª≥!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆∞·ªùng d√¢y trung th·∫ø c√πng k·ª≥: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_ck_dy = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆∞·ªùng d√¢y trung th·∫ø c√πng k·ª≥: {e}")
            st.session_state.df_trung_ck_dy = None


with st.expander("üè¢ T·ªïn th·∫•t to√†n ƒë∆°n v·ªã"):
    upload_dv_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu ƒê∆°n v·ªã - Theo th√°ng", type=["xlsx"], key="dv_thang")
    if upload_dv_thang:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_dv_thang = pd.read_excel(upload_dv_thang, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t To√†n ƒë∆°n v·ªã - Theo th√°ng!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆°n v·ªã theo th√°ng: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_dv_thang = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆°n v·ªã theo th√°ng: {e}")
            st.session_state.df_dv_thang = None

    upload_dv_luyke = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu ƒê∆°n v·ªã - L≈©y k·∫ø", type=["xlsx"], key="dv_luyke")
    if upload_dv_luyke:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_dv_luyke = pd.read_excel(upload_dv_luyke, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t To√†n ƒë∆°n v·ªã - L≈©y k·∫ø!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆°n v·ªã l≈©y k·∫ø: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_dv_luyke = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆°n v·ªã l≈©y k·∫ø: {e}")
            st.session_state.df_dv_luyke = None

    upload_dv_ck = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu ƒê∆°n v·ªã - C√πng k·ª≥", type=["xlsx"], key="dv_ck")
    if upload_dv_ck:
        try:
            # ƒê√£ thay th·∫ø "T√äN_SHEET_CH√çNH_X√ÅC_C·ª¶A_B·∫†N" b·∫±ng "d·ªØ li·ªáu"
            st.session_state.df_dv_ck = pd.read_excel(upload_dv_ck, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t To√†n ƒë∆°n v·ªã - C√πng k·ª≥!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆°n v·ªã c√πng k·ª≥: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_dv_ck = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆°n v·ªã c√πng k·ª≥: {e}")
            st.session_state.df_dv_ck = None