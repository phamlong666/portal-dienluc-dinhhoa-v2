import streamlit as st
import pandas as pd
import math
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import st_folium
from datetime import datetime
import zipfile
import xml.etree.ElementTree as ET
import json
import os
import io

st.set_page_config(layout="wide")
st.title("üìç D·ª± b√°o ƒëi·ªÉm s·ª± c·ªë")

# ==============================
# 1. T·∫¢I FILE KMZ V√Ä CHUY·ªÇN TH√ÄNH marker_locations.json
# ==============================
st.subheader("üìÇ C·∫≠p nh·∫≠t b·∫£n ƒë·ªì b·∫±ng file .KMZ")

kmz_file = st.file_uploader("T·∫£i l√™n file KMZ", type="kmz")
marker_locations = {}

if kmz_file is not None:
    with zipfile.ZipFile(kmz_file, 'r') as z:
        for filename in z.namelist():
            if filename.endswith('.kml'):
                with z.open(filename) as f:
                    tree = ET.parse(f)
                    root = tree.getroot()
                    ns = {'kml': 'http://www.opengis.net/kml/2.2'}
                    for pm in root.findall('.//kml:Placemark', ns):
                        name_tag = pm.find('kml:name', ns)
                        point = pm.find('.//kml:coordinates', ns)
                        if name_tag is not None and point is not None:
                            name = name_tag.text.strip()
                            coords = point.text.strip().split(',')
                            lon, lat = float(coords[0]), float(coords[1])
                            marker_locations[name] = (lat, lon)
    st.success(f"‚úîÔ∏è ƒê√£ tr√≠ch xu·∫•t {len(marker_locations)} ƒëi·ªÉm t·ª´ file KMZ.")
    with open("marker_locations.json", "w") as f:
        json.dump(marker_locations, f)

# ==============================
# 2. B·∫¢NG NH·∫¨P TH·ª¶ C√îNG C√ÅC V·ª§ S·ª∞ C·ªê G·∫¶N ƒê√ÇY
# ==============================
st.subheader("üìù Nh·∫≠p th·ªß c√¥ng c√°c v·ª• s·ª± c·ªë g·∫ßn nh·∫•t")

if "suco_data" not in st.session_state:
    st.session_state.suco_data = []

with st.form("suco_form"):
    col1, col2 = st.columns(2)
    with col1:
        ten_mc = st.text_input("T√™n m√°y c·∫Øt")
        ngay = st.date_input("Ng√†y x·∫£y ra s·ª± c·ªë", format="DD/MM/YYYY")
        dong_suco = st.text_input("D√≤ng s·ª± c·ªë (Ia, Ib, Ic, Io, 3Uo...)")
    with col2:
        vi_tri = st.text_input("V·ªã tr√≠ s·ª± c·ªë")
        nguyen_nhan = st.text_input("Nguy√™n nh√¢n")
        thoi_tiet = st.text_input("Th·ªùi ti·∫øt")

    submitted = st.form_submit_button("L∆∞u v·ª• s·ª± c·ªë")
    if submitted:
        st.session_state.suco_data.append({
            "T√™n m√°y c·∫Øt": ten_mc,
            "Ng√†y": ngay.strftime("%d/%m/%Y"),
            "D√≤ng s·ª± c·ªë": dong_suco,
            "V·ªã tr√≠": vi_tri,
            "Nguy√™n nh√¢n": nguyen_nhan,
            "Th·ªùi ti·∫øt": thoi_tiet
        })
        st.success("‚úîÔ∏è ƒê√£ l∆∞u v·ª• s·ª± c·ªë!")

# Hi·ªÉn th·ªã b·∫£ng ƒë√£ l∆∞u v√† cho ph√©p s·ª≠a/x√≥a
if st.session_state.suco_data:
    st.write("### üìã Danh s√°ch s·ª± c·ªë ƒë√£ nh·∫≠p")
    df_suco = pd.DataFrame(st.session_state.suco_data)
    edited_df = st.data_editor(df_suco, num_rows="dynamic", use_container_width=True)

    # C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu n·∫øu s·ª≠a
    if st.button("C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë√£ s·ª≠a"):
        st.session_state.suco_data = edited_df.to_dict(orient="records")
        st.success("‚úîÔ∏è ƒê√£ c·∫≠p nh·∫≠t danh s√°ch sau khi ch·ªânh s·ª≠a!")

    # Cho ph√©p xu·∫•t Excel
    def convert_df(df):
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, sheet_name='SuCo', index=False)
        return output.getvalue()

    st.download_button(
        label="üì§ Xu·∫•t b√°o c√°o Excel",
        data=convert_df(df_suco),
        file_name="bao_cao_su_co.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# (Ph·∫ßn ph√¢n t√≠ch s·ª± c·ªë v√† hi·ªÉn th·ªã marker s·∫Ω ƒë∆∞·ª£c gh√©p ·ªü giai ƒëo·∫°n ti·∫øp theo)
