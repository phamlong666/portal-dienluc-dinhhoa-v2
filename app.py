from pathlib import Path
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
from docx import Document
from docx.shared import Inches
from fpdf import FPDF
from pptx import Presentation
from pptx.util import Inches as PPTInches

st.set_page_config(page_title="B√°o c√°o t·ªïn th·∫•t TBA", layout="wide")
st.title("üìä B√°o c√°o t·ªïn th·∫•t c√°c TBA c√¥ng c·ªông")

# ====== Session State Duy Tr√¨ D·ªØ Li·ªáu ======
if "uploaded_data" not in st.session_state:
    st.session_state.uploaded_data = {
        "Theo Th√°ng": None,
        "L≈©y k·∫ø": None,
        "C√πng k·ª≥": None
    }

# ====== H√†m ƒë·ªçc v√† x·ª≠ l√Ω file √°nh x·∫° ======
def read_mapping_sheet(uploaded_file):
    try:
        xls = pd.ExcelFile(uploaded_file)
        sheet_name = [s for s in xls.sheet_names if "√°nh x·∫°" in s.lower()][0]
        df = pd.read_excel(xls, sheet_name=sheet_name)

        percent_cols = [col for col in df.columns if "%" in col or "t·ª∑ l·ªá" in col.lower()]
        for col in percent_cols:
            df[col] = pd.to_numeric(
                df[col].astype(str)
                .str.replace("%", "", regex=False)
                .str.replace(",", ".", regex=False)
                .replace("", np.nan), errors="coerce"
            )

        float_cols = df.select_dtypes(include=[np.number]).columns
        df[float_cols] = df[float_cols].apply(lambda x: np.round(x, 2))
        return df
    except Exception as e:
        st.warning(f"L·ªói ƒë·ªçc file {uploaded_file.name}: {e}")
        return None

# ====== Giao di·ªán t·∫£i file ======
col1, col2, col3 = st.columns(3)
with col1:
    file_thang = st.file_uploader("üìÖ T·∫£i File Theo Th√°ng", type="xlsx")
    if file_thang: st.session_state.uploaded_data["Theo Th√°ng"] = file_thang
with col2:
    file_luyke = st.file_uploader("üìä T·∫£i File L≈©y K·∫ø", type="xlsx")
    if file_luyke: st.session_state.uploaded_data["L≈©y k·∫ø"] = file_luyke
with col3:
    file_cungky = st.file_uploader("üìà T·∫£i File C√πng K·ª≥", type="xlsx")
    if file_cungky: st.session_state.uploaded_data["C√πng k·ª≥"] = file_cungky

# ====== N√∫t l√†m m·ªõi d·ªØ li·ªáu ======
if st.button("üîÑ L√†m m·ªõi (X√≥a d·ªØ li·ªáu ƒë√£ t·∫£i)"):
    st.session_state.uploaded_data = {"Theo Th√°ng": None, "L≈©y k·∫ø": None, "C√πng k·ª≥": None}
    st.experimental_rerun()

# ====== X·ª≠ l√Ω v√† hi·ªÉn th·ªã t·ª´ng b·∫£ng ======
def calc_overall_rate(df):
    total_input = df.get("ƒêi·ªán nh·∫≠n ƒë·∫ßu ngu·ªìn")
    total_loss = df.get("T·ªïn th·∫•t (KWh)")
    if total_input is None or total_loss is None:
        return 0.0, 0.0
    actual = (total_loss.sum() / total_input.sum() * 100) if total_input.sum() else 0.0
    plan_col = [col for col in df.columns if "k·∫ø ho·∫°ch" in col.lower()]
    plan = df[plan_col[0]].mean() if plan_col else 0.0
    return round(actual, 2), round(plan, 2)

chart_data = {}
for label, file in st.session_state.uploaded_data.items():
    if file:
        df = read_mapping_sheet(file)
        st.markdown(f"<h3 style='font-size:22px; color:blue;'>üìÇ D·ªØ li·ªáu t·ªïn th·∫•t - {label}</h3>", unsafe_allow_html=True)
        with st.expander(f"üßæ M·ªü r·ªông/Thu g·ªçn b·∫£ng {label}"):
            st.markdown("<style> .element-container table { font-size: 16px !important; } </style>", unsafe_allow_html=True)
            st.dataframe(df, use_container_width=True, height=350)

        actual, plan = calc_overall_rate(df)
        chart_data[label] = (actual, plan)

        # V·∫Ω bi·ªÉu ƒë·ªì
        st.markdown(f"<h4 style='font-size:18px;'>üìâ Bi·ªÉu ƒë·ªì t·ªïn th·∫•t - {label}</h4>", unsafe_allow_html=True)
        fig, ax = plt.subplots(figsize=(2, 1))
        bars = ax.bar(["Th·ª±c hi·ªán", "K·∫ø ho·∫°ch"], [actual, plan], color=["#1976D2", "#FFC107"])
        ax.set_ylim(0, max(actual, plan) * 1.5 + 1)
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, height + 0.2, f"{height:.2f}%", ha='center', fontsize=8)
        st.pyplot(fig)

# ====== V·∫Ω bi·ªÉu ƒë·ªì h·ª£p nh·∫•t ======
if chart_data:
    st.markdown("<h3 style='font-size:22px;'>üìä Bi·ªÉu ƒë·ªì so s√°nh t·ªïng h·ª£p</h3>", unsafe_allow_html=True)
    fig, ax = plt.subplots(figsize=(3, 2))
    labels = list(chart_data.keys())
    actual_vals = [v[0] for v in chart_data.values()]
    plan_vals = [v[1] for v in chart_data.values()]
    width = 0.35
    x = np.arange(len(labels))
    ax.bar(x - width/2, actual_vals, width, label="Th·ª±c hi·ªán", color="#42A5F5")
    ax.bar(x + width/2, plan_vals, width, label="K·∫ø ho·∫°ch", color="#FFB300")
    ax.set_xticks(x)
    ax.set_xticklabels(labels)
    ax.legend()
    st.pyplot(fig)

# ====== N√∫t t·∫£i b√°o c√°o ======
def export_docx(data):
    doc = Document()
    doc.add_heading("B√°o c√°o t·ªïn th·∫•t TBA", 0)
    for label, (a, p) in data.items():
        doc.add_paragraph(f"{label}: Th·ª±c hi·ªán {a}% | K·∫ø ho·∫°ch {p}%")
    buf = io.BytesIO()
    doc.save(buf)
    st.download_button("üìÑ T·∫£i b√°o c√°o Word", buf.getvalue(), file_name="bao_cao_ton_that.docx")

def export_pdf(data):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font('DejaVu', '', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', uni=True)
    pdf.set_font("DejaVu", size=14)
    pdf.cell(200, 10, txt="B√°o c√°o t·ªïn th·∫•t TBA", ln=True, align='C')
    for label, (a, p) in data.items():
        pdf.cell(200, 10, txt=f"{label}: Th·ª±c hi·ªán {a}% | K·∫ø ho·∫°ch {p}%", ln=True)
    buf = io.BytesIO()
    pdf.output(buf)
    st.download_button("üìÑ T·∫£i b√°o c√°o PDF", buf.getvalue(), file_name="bao_cao_ton_that.pdf")

def export_pptx(data):
    prs = Presentation()
    slide = prs.slides.add_slide(prs.slide_layouts[5])
    title = slide.shapes.title
    title.text = "B√°o c√°o t·ªïn th·∫•t TBA"
    top = PPTInches(1.5)
    for label, (a, p) in data.items():
        body_shape = slide.shapes.add_textbox(PPTInches(1), top, PPTInches(8), PPTInches(0.5))
        tf = body_shape.text_frame
        tf.text = f"{label}: Th·ª±c hi·ªán {a}% | K·∫ø ho·∫°ch {p}%"
        top += PPTInches(0.5)
    buf = io.BytesIO()
    prs.save(buf)
    st.download_button("üìä T·∫£i b√°o c√°o PowerPoint", buf.getvalue(), file_name="bao_cao_ton_that.pptx")

if chart_data:
    export_docx(chart_data)
    export_pdf(chart_data)
    export_pptx(chart_data)
