# app_tba_congcong.py
import streamlit as st
import pandas as pd
import requests
from io import BytesIO
from datetime import datetime
import matplotlib.pyplot as plt
import os
import re

# Import c√°c th∆∞ vi·ªán Google API
from googleapiclient.discovery import build
# B·∫°n c√≥ th·ªÉ kh√¥ng c·∫ßn c√°c th∆∞ vi·ªán google.oauth2 v√† google.auth n·∫øu ch·ªâ d√πng API Key cho folder c√¥ng khai
# from google.oauth2.credentials import Credentials
# from google.auth.transport.requests import Request
# from google.auth.exceptions import RefreshError

st.set_page_config(layout="wide", page_title="Ph√¢n t√≠ch t·ªïn th·∫•t TBA c√¥ng c·ªông")
st.title("üìä Ph√¢n t√≠ch t·ªïn th·∫•t c√°c TBA c√¥ng c·ªông")

# ==== C·∫§U H√åNH CH·∫æ ƒê·ªò PH√ÇN T√çCH ====
col1, col2, col3 = st.columns(3)

with col1:
    mode = st.radio("Ch·∫ø ƒë·ªô ph√¢n t√≠ch", ["Theo th√°ng", "L≈©y k·∫ø", "So s√°nh c√πng k·ª≥", "L≈©y k·∫ø c√πng k·ª≥"])

with col2:
    thang_from = st.selectbox("T·ª´ th√°ng", list(range(1, 13)), index=0)
    if "L≈©y k·∫ø" in mode:
        thang_to = st.selectbox("ƒê·∫øn th√°ng", list(range(thang_from, 13)), index=4)
    else:
        thang_to = thang_from

with col3:
    nam = st.selectbox("Ch·ªçn nƒÉm", list(range(2020, datetime.now().year + 1))[::-1], index=0)

# ==== C·∫§U H√åNH GOOGLE DRIVE API ====
# Kh√≥a API c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay th·∫ø v√†o ƒë√¢y
API_KEY = "AIzaSyB2sDczQAzYdi8ffFut3Ie0DluchLta4Ls" 

# ID c·ªßa th∆∞ m·ª•c Google Drive c√¥ng khai c·ªßa b·∫°n
# Ch·ªâ l·∫•y ph·∫ßn ID sau "folders/"
FOLDER_ID = "1o1O5jMhvJ6V2bqr6VdNoWTfXYiFYnl98"

# H√†m kh·ªüi t·∫°o d·ªãch v·ª• Google Drive API
@st.cache_resource # S·ª≠ d·ª•ng cache ƒë·ªÉ tr√°nh kh·ªüi t·∫°o l·∫°i service m·ªói l·∫ßn ch·∫°y l·∫°i script
def get_drive_service(api_key):
    try:
        service = build('drive', 'v3', developerKey=api_key)
        st.success("ƒê√£ kh·ªüi t·∫°o d·ªãch v·ª• Google Drive API th√†nh c√¥ng.")
        return service
    except Exception as e:
        st.error(f"L·ªói khi kh·ªüi t·∫°o d·ªãch v·ª• Google Drive API: {e}. Vui l√≤ng ki·ªÉm tra API Key c·ªßa b·∫°n.")
        return None

# ==== H√ÄM QU√âT DANH S√ÅCH FILE TR√äN GOOGLE DRIVE S·ª¨ D·ª§NG API ====
def get_file_links_from_drive_api(service, folder_id):
    files = {}
    if not service:
        return files
    
    st.write(f"ƒêang t√¨m ki·∫øm t·ªáp trong th∆∞ m·ª•c Google Drive ID: {folder_id} b·∫±ng API.")
    try:
        # T√¨m c√°c t·ªáp trong th∆∞ m·ª•c c·ª• th·ªÉ, ch·ªâ l·∫•y t√™n v√† ID
        # q: T√¨m ki·∫øm c√°c t·ªáp c√≥ 'folder_id' trong parents v√† c√≥ mimeType l√† Excel
        # fields: ch·ªâ ƒë·ªãnh c√°c tr∆∞·ªùng c·∫ßn l·∫•y (file id v√† t√™n)
        results = service.files().list(
            q=f"'{folder_id}' in parents and (mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' or mimeType='application/vnd.ms-excel')",
            fields="files(id, name)"
        ).execute()
        
        items = results.get('files', [])

        if not items:
            st.warning("Kh√¥ng t√¨m th·∫•y t·ªáp Excel n√†o trong th∆∞ m·ª•c Google Drive ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.")
        else:
            for item in items:
                file_name = item['name']
                file_id = item['id']
                files[file_name] = file_id
                st.write(f"  - T√¨m th·∫•y t·ªáp: {file_name} (ID: {file_id})")
        st.write(f"T·ªïng s·ªë t·ªáp Excel ƒë∆∞·ª£c x√°c ƒë·ªãnh t·ª´ Drive (qua API): {len(files)}")
        return files
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y danh s√°ch t·ªáp t·ª´ Google Drive API: {e}. Vui l√≤ng ki·ªÉm tra ID th∆∞ m·ª•c v√† quy·ªÅn truy c·∫≠p API.")
        return {}

# H√†m t·∫£i xu·ªëng Excel t·ª´ Google Drive API
def download_excel_from_drive_api(service, file_id):
    if not service:
        return pd.DataFrame()

    try:
        # S·ª≠ d·ª•ng API ƒë·ªÉ t·∫£i n·ªôi dung t·ªáp
        # T·ªáp l·ªõn h∆°n 10MB c·∫ßn d√πng requests.get(download_url) thay v√¨ service.files().get_media()
        # ƒê·ªëi v·ªõi file Excel nh·ªè, get_media l√† ƒë·ªß.
        request = service.files().get_media(fileId=file_id)
        file_content = BytesIO(request.execute())
        
        df = pd.read_excel(file_content, sheet_name="d·ªØ li·ªáu")
        st.write(f"  - ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng t·ª´ t·ªáp ID {file_id}. K√≠ch th∆∞·ªõc DataFrame: {df.shape}")
        return df
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i ho·∫∑c ƒë·ªçc t·ªáp Excel t·ª´ ID {file_id} qua API: {e}. C√≥ th·ªÉ t√™n sheet 'd·ªØ li·ªáu' kh√¥ng t·ªìn t·∫°i ho·∫∑c t·ªáp b·ªã h·ªèng.")
        return pd.DataFrame()

# ==== H√ÄM PH√ÇN T√çCH (gi·ªØ nguy√™n, ch·ªâ g·ªçi c√°c h√†m API m·ªõi) ====
def generate_filenames(year, start_month, end_month):
    return [f"TBA_{year}_{str(m).zfill(2)}.xlsx" for m in range(start_month, end_month + 1)]

def load_data_from_drive(file_list, drive_files_map, drive_service): # Th√™m drive_service
    dfs = []
    st.write(f"ƒêang t·∫£i d·ªØ li·ªáu cho c√°c t·ªáp: {file_list}")
    for file in file_list:
        file_id = drive_files_map.get(file)
        if file_id:
            st.write(f"ƒêang t·∫£i t·ªáp: {file} (ID: {file_id})")
            df = download_excel_from_drive_api(drive_service, file_id) # G·ªçi h√†m API m·ªõi
            if not df.empty:
                dfs.append(df)
            else:
                st.warning(f"T·ªáp '{file}' (ID: {file_id}) ƒë∆∞·ª£c t·∫£i v·ªÅ nh∆∞ng tr·ªëng ho·∫∑c c√≥ l·ªói khi ƒë·ªçc.")
        else:
            st.warning(f"Kh√¥ng t√¨m th·∫•y ID cho t·ªáp '{file}' trong danh s√°ch t·ªáp t·ª´ Google Drive. T·ªáp n√†y c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i ho·∫∑c t√™n kh√¥ng kh·ªõp.")
    
    if dfs:
        combined_df = pd.concat(dfs)
        st.write(f"ƒê√£ k·∫øt h·ª£p {len(dfs)} DataFrame. K√≠ch th∆∞·ªõc DataFrame cu·ªëi c√πng: {combined_df.shape}")
        return combined_df
    else:
        st.warning("Kh√¥ng c√≥ DataFrame n√†o ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng t·ª´ c√°c t·ªáp ƒë√£ ch·ªçn.")
        return pd.DataFrame()

# ==== X·ª¨ L√ù CH√çNH ====
st.markdown("---")
st.write("B·∫Øt ƒë·∫ßu qu√° tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu...")

# Kh·ªüi t·∫°o d·ªãch v·ª• Drive API
drive_service = get_drive_service(API_KEY)

# L·∫•y danh s√°ch t·ªáp t·ª´ Drive b·∫±ng API
drive_files_map = {}
if drive_service:
    drive_files_map = get_file_links_from_drive_api(drive_service, FOLDER_ID)
else:
    st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o d·ªãch v·ª• Google Drive API. Vui l√≤ng ki·ªÉm tra API Key.")

if not drive_files_map:
    st.error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch t·ªáp t·ª´ Google Drive. Vui l√≤ng ki·ªÉm tra FOLDER_ID, API Key v√† quy·ªÅn truy c·∫≠p th∆∞ m·ª•c. ƒê·∫£m b·∫£o c√°c t·ªáp l√† Excel (.xlsx ho·∫∑c .xls).")
    df = pd.DataFrame() # ƒê·∫£m b·∫£o df tr·ªëng n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c file
else:
    st.write(f"Ch·∫ø ƒë·ªô ph√¢n t√≠ch ƒë∆∞·ª£c ch·ªçn: {mode}")
    st.write(f"NƒÉm: {nam}, T·ª´ th√°ng: {thang_from}, ƒê·∫øn th√°ng: {thang_to}")

    df = pd.DataFrame() # Kh·ªüi t·∫°o df r·ªóng ƒë·ªÉ tr√°nh l·ªói n·∫øu kh√¥ng v√†o ƒë∆∞·ª£c c√°c ƒëi·ªÅu ki·ªán

    if mode == "Theo th√°ng":
        files = generate_filenames(nam, thang_from, thang_from)
        st.write(f"T·ªáp c·∫ßn t√¨m cho ch·∫ø ƒë·ªô 'Theo th√°ng': {files}")
        df = load_data_from_drive(files, drive_files_map, drive_service)

    elif mode == "L≈©y k·∫ø":
        files = generate_filenames(nam, thang_from, thang_to)
        st.write(f"C√°c t·ªáp c·∫ßn t√¨m cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø': {files}")
        df = load_data_from_drive(files, drive_files_map, drive_service)
        if not df.empty and "T√™n TBA" in df.columns:
            st.write("ƒêang nh√≥m d·ªØ li·ªáu theo 'T√™n TBA' cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø'.")
            df = df.groupby("T√™n TBA", as_index=False).sum(numeric_only=True)
        elif not df.empty and "T√™n TBA" not in df.columns:
            st.warning("C·ªôt 'T√™n TBA' kh√¥ng t√¨m th·∫•y trong d·ªØ li·ªáu cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø'. Kh√¥ng th·ªÉ nh√≥m d·ªØ li·ªáu.")

    elif mode == "So s√°nh c√πng k·ª≥":
        files_now = generate_filenames(nam, thang_from, thang_from)
        files_last = generate_filenames(nam - 1, thang_from, thang_from)
        st.write(f"T·ªáp hi·ªán t·∫°i ({nam}) cho ch·∫ø ƒë·ªô 'So s√°nh c√πng k·ª≥': {files_now}")
        st.write(f"T·ªáp nƒÉm tr∆∞·ªõc ({nam-1}) cho ch·∫ø ƒë·ªô 'So s√°nh c√πng k·ª≥': {files_last}")
        df_now = load_data_from_drive(files_now, drive_files_map, drive_service)
        df_last = load_data_from_drive(files_last, drive_files_map, drive_service)
        if not df_now.empty and not df_last.empty:
            if "T√™n TBA" in df_now.columns and "T√™n TBA" in df_last.columns:
                st.write("ƒêang h·ª£p nh·∫•t d·ªØ li·ªáu cho ch·∫ø ƒë·ªô 'So s√°nh c√πng k·ª≥'.")
                cols_to_sum = [col for col in df_now.columns if pd.api.types.is_numeric_dtype(df_now[col]) or col == "T√™n TBA"]
                df_now_filtered = df_now[cols_to_sum]
                df_last_filtered = df_last[cols_to_sum]
                
                df = df_now_filtered.merge(df_last_filtered, on="T√™n TBA", suffixes=(f"_{nam}", f"_{nam-1}"))
                
                col_dien_ton_that_nam = f"ƒêi·ªán t·ªïn th·∫•t_{nam}"
                col_dien_ton_that_nam_truoc = f"ƒêi·ªán t·ªïn th·∫•t_{nam-1}"
                
                if col_dien_ton_that_nam in df.columns and col_dien_ton_that_nam_truoc in df.columns:
                    df["Ch√™nh l·ªách t·ªïn th·∫•t"] = df[col_dien_ton_that_nam] - df[col_dien_ton_that_nam_truoc]
                else:
                    st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªôt '{col_dien_ton_that_nam}' ho·∫∑c '{col_dien_ton_that_nam_truoc}' ƒë·ªÉ t√≠nh to√°n 'Ch√™nh l·ªách t·ªïn th·∫•t'.")
            else:
                st.warning("C·ªôt 'T√™n TBA' kh√¥ng t√¨m th·∫•y trong m·ªôt trong c√°c DataFrame cho ch·∫ø ƒë·ªô 'So s√°nh c√πng k·ª≥'.")
        else:
            st.warning("M·ªôt trong c√°c DataFrame (hi·ªán t·∫°i ho·∫∑c nƒÉm tr∆∞·ªõc) tr·ªëng cho ch·∫ø ƒë·ªô 'So s√°nh c√πng k·ª≥'.")
            df = pd.DataFrame()

    elif mode == "L≈©y k·∫ø c√πng k·ª≥":
        files_now = generate_filenames(nam, thang_from, thang_to)
        files_last = generate_filenames(nam - 1, thang_from, thang_to)
        st.write(f"C√°c t·ªáp hi·ªán t·∫°i ({nam}) cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥': {files_now}")
        st.write(f"C√°c t·ªáp nƒÉm tr∆∞·ªõc ({nam-1}) cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥': {files_last}")
        df_now = load_data_from_drive(files_now, drive_files_map, drive_service)
        df_last = load_data_from_drive(files_last, drive_files_map, drive_service)
        if not df_now.empty and not df_last.empty:
            if "T√™n TBA" in df_now.columns and "T√™n TBA" in df_last.columns:
                st.write("ƒêang nh√≥m v√† h·ª£p nh·∫•t d·ªØ li·ªáu cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥'.")
                df_now_group = df_now.groupby("T√™n TBA", as_index=False).sum(numeric_only=True)
                df_last_group = df_last.groupby("T√™n TBA", as_index=False).sum(numeric_only=True)
                
                df = df_now_group.merge(df_last_group, on="T√™n TBA", suffixes=(f"_{nam}", f"_{nam-1}"))
                
                col_dien_ton_that_nam = f"ƒêi·ªán t·ªïn th·∫•t_{nam}"
                col_dien_ton_that_nam_truoc = f"ƒêi·ªán t·ªïn th·∫•t_{nam-1}"
                
                if col_dien_ton_that_nam in df.columns and col_dien_ton_that_nam_truoc in df.columns:
                    df["Ch√™nh l·ªách t·ªïn th·∫•t"] = df[col_dien_ton_that_nam] - df[col_dien_ton_that_nam_truoc]
                else:
                    st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªôt '{col_dien_ton_that_nam}' ho·∫∑c '{col_dien_ton_that_nam_truoc}' ƒë·ªÉ t√≠nh to√°n 'Ch√™nh l·ªách t·ªïn th·∫•t' trong ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥'.")
            else:
                st.warning("C·ªôt 'T√™n TBA' kh√¥ng t√¨m th·∫•y trong m·ªôt trong c√°c DataFrame ƒë√£ nh√≥m cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥'.")
        else:
            st.warning("M·ªôt trong c√°c DataFrame (hi·ªán t·∫°i ho·∫∑c nƒÉm tr∆∞·ªõc) tr·ªëng cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥'.")
            df = pd.DataFrame()

# ==== HI·ªÇN TH·ªä ====
st.markdown("---")
if not df.empty:
    st.dataframe(df, use_container_width=True)
    if "T·ª∑ l·ªá t·ªïn th·∫•t" in df.columns:
        st.write("C·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' ƒë∆∞·ª£c t√¨m th·∫•y. ƒêang t·∫°o bi·ªÉu ƒë·ªì.")
        fig, ax = plt.subplots(figsize=(10, 6))
        df.plot(kind="bar", x="T√™n TBA", y="T·ª∑ l·ªá t·ªïn th·∫•t", ax=ax)
        ax.set_title("Bi·ªÉu ƒë·ªì t·ª∑ l·ªá t·ªïn th·∫•t c√°c TBA", fontsize=14, fontweight='bold', color='black')
        ax.set_ylabel("T·ª∑ l·ªá t·ªïn th·∫•t (%)", fontsize=12, fontweight='bold', color='black')
        ax.set_xlabel("T√™n TBA", fontsize=12, fontweight='bold', color='black')
        ax.tick_params(axis='x', labelrotation=90, labelcolor='black', labelsize=10)
        ax.tick_params(axis='y', labelcolor='black', labelsize=10)
        plt.tight_layout()
        st.pyplot(fig)
    else:
        st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' trong DataFrame. Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì.")
else:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p ho·∫∑c thi·∫øu t·ªáp Excel trong th∆∞ m·ª•c Google Drive.")
    st.write("DataFrame tr·ªëng. Vui l√≤ng ki·ªÉm tra c√°c ƒë∆∞·ªùng d·∫´n t·ªáp, t√™n t·ªáp v√† n·ªôi dung trong Google Drive.")