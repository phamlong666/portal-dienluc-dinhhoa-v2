from pathlib import Path
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
from docx import Document
from docx.shared import Inches

st.set_page_config(page_title="B√°o c√°o t·ªïn th·∫•t TBA", layout="wide")
st.title("üìä B√°o c√°o t·ªïn th·∫•t c√°c TBA c√¥ng c·ªông")

# ====== Session State Duy Tr√¨ D·ªØ Li·ªáu ======
if "uploaded_data" not in st.session_state:
    st.session_state.uploaded_data = {
        "Theo Th√°ng": None,
        "L≈©y k·∫ø": None,
        "C√πng k·ª≥": None
    }

# ====== H√†m ƒë·ªçc v√† x·ª≠ l√Ω file √°nh x·∫° ======
def read_mapping_sheet(uploaded_file):
    try:
        xls = pd.ExcelFile(uploaded_file)
        sheet_name = [s for s in xls.sheet_names if "√°nh x·∫°" in s.lower()][0]
        df = pd.read_excel(xls, sheet_name=sheet_name)

        percent_cols = [col for col in df.columns if "%" in col or "t·ª∑ l·ªá" in col.lower()]
        for col in percent_cols:
            df[col] = pd.to_numeric(
                df[col].astype(str)
                .str.replace("%", "", regex=False)
                .str.replace(",", ".", regex=False)
                .replace("", np.nan), errors="coerce"
            )

        float_cols = df.select_dtypes(include=[np.number]).columns
        df[float_cols] = df[float_cols].apply(lambda x: np.round(x, 2))
        return df
    except Exception as e:
        st.warning(f"L·ªói ƒë·ªçc file {uploaded_file.name}: {e}")
        return None

# ====== Giao di·ªán t·∫£i file ======
col1, col2, col3 = st.columns(3)
with col1:
    file_thang = st.file_uploader("üìÖ T·∫£i File Theo Th√°ng", type="xlsx")
    if file_thang: st.session_state.uploaded_data["Theo Th√°ng"] = file_thang
with col2:
    file_luyke = st.file_uploader("üìä T·∫£i File L≈©y K·∫ø", type="xlsx")
    if file_luyke: st.session_state.uploaded_data["L≈©y k·∫ø"] = file_luyke
with col3:
    file_cungky = st.file_uploader("üìà T·∫£i File C√πng K·ª≥", type="xlsx")
    if file_cungky: st.session_state.uploaded_data["C√πng k·ª≥"] = file_cungky

# ====== N√∫t l√†m m·ªõi d·ªØ li·ªáu ======
if st.button("üîÑ L√†m m·ªõi (X√≥a d·ªØ li·ªáu ƒë√£ t·∫£i)"):
    st.session_state.uploaded_data = {"Theo Th√°ng": None, "L≈©y k·∫ø": None, "C√πng k·ª≥": None}
    st.experimental_rerun()

# ====== X·ª≠ l√Ω v√† hi·ªÉn th·ªã t·ª´ng b·∫£ng ======
def calc_overall_rate(df):
    total_input = df["ƒêi·ªán nh·∫≠n ƒë·∫ßu ngu·ªìn"].sum()
    total_loss = df["T·ªïn th·∫•t (KWh)"].sum()
    actual = (total_loss / total_input * 100) if total_input else 0.0
    plan_col = [col for col in df.columns if "k·∫ø ho·∫°ch" in col.lower()]
    if plan_col:
        plan = df[plan_col[0]].mean()
    else:
        plan = 0.0
    return round(actual, 2), round(plan, 2)

for label, file in st.session_state.uploaded_data.items():
    if file:
        df = read_mapping_sheet(file)
        st.markdown(f"<h3 style='font-size:22px; color:blue;'>üìÇ D·ªØ li·ªáu t·ªïn th·∫•t - {label}</h3>", unsafe_allow_html=True)
        with st.expander(f"üßæ M·ªü r·ªông/Thu g·ªçn b·∫£ng {label}"):
            st.dataframe(df, use_container_width=True, height=350)

        actual, plan = calc_overall_rate(df)

        # V·∫Ω bi·ªÉu ƒë·ªì
        st.markdown(f"<h4 style='font-size:18px;'>üìâ Bi·ªÉu ƒë·ªì t·ªïn th·∫•t - {label}</h4>", unsafe_allow_html=True)
        fig, ax = plt.subplots(figsize=(4,2))
        bars = ax.bar(["Th·ª±c hi·ªán", "K·∫ø ho·∫°ch"], [actual, plan], color=["#1976D2", "#FFC107"])
        ax.set_ylim(0, max(actual, plan) * 1.5 + 1)
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, height + 0.2, f"{height:.2f}%", ha='center', fontsize=8)
        st.pyplot(fig)

# ====== G·ªôp v√† so s√°nh (khi c√≥ nhi·ªÅu file) ======
if all(st.session_state.uploaded_data.values()):
    st.markdown("<h3 style='font-size:22px;'>üìä So s√°nh t·ªïn th·∫•t gi·ªØa c√°c lo·∫°i d·ªØ li·ªáu</h3>", unsafe_allow_html=True)
    combined_df = pd.DataFrame()
    for label, file in st.session_state.uploaded_data.items():
        df = read_mapping_sheet(file)
        if df is not None:
            df["Lo·∫°i"] = label
            combined_df = pd.concat([combined_df, df], ignore_index=True)

    with st.expander("üìã Xem b·∫£ng t·ªïng h·ª£p so s√°nh"):
        st.dataframe(combined_df, use_container_width=True, height=400)

    # Xu·∫•t b√°o c√°o Word/PDF/PowerPoint (ch·ªù b∆∞·ªõc 2)
    # ... (s·∫Ω b·ªï sung n·∫øu anh Long y√™u c·∫ßu c·ª• th·ªÉ t·ª´ng ƒë·ªãnh d·∫°ng sau)

# ====== G·ª£i √Ω ti·∫øp theo ======
st.markdown("""
---
üìå **G·ª£i √Ω:** Anh c√≥ th·ªÉ y√™u c·∫ßu xu·∫•t b√°o c√°o gi·ªëng h√¨nh ·∫£nh m·∫´u, t·∫°o file PDF/PPT, ho·∫∑c chia nh·ªè c√°c t·ªïn th·∫•t theo ng∆∞·ª°ng.
""")
