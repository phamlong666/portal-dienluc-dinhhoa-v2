from pathlib import Path
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
from docx import Document
from docx.shared import Inches

st.set_page_config(page_title="B√°o c√°o t·ªïn th·∫•t TBA", layout="wide")
st.title("üìä B√°o c√°o t·ªïn th·∫•t c√°c TBA c√¥ng c·ªông")

# ==== H√†m x·ª≠ l√Ω d·ªØ li·ªáu ====
def read_mapping_sheet(uploaded_file):
    try:
        xls = pd.ExcelFile(uploaded_file)
        sheet_name = [s for s in xls.sheet_names if "√°nh x·∫°" in s.lower()][0]
        df = pd.read_excel(xls, sheet_name=sheet_name)

        for col in df.columns:
            if df[col].dtype in [np.float64, np.int64]:
                df[col] = pd.to_numeric(df[col], errors="coerce")

        percent_cols = [col for col in df.columns if "%" in col]
        for col in percent_cols:
            df[col] = pd.to_numeric(
                df[col].astype(str)
                .str.replace("%", "", regex=False)
                .str.replace(",", ".", regex=False)
                .replace("", np.nan),
                errors="coerce",
            )
        return df
    except Exception as e:
        st.warning(f"L·ªói khi ƒë·ªçc file {uploaded_file.name}: {e}")
        return None


def calc_overall_rate(df):
    try:
        total_input = df["ƒêi·ªán nh·∫≠n (kWh)"].sum()
        total_loss = df["ƒêi·ªán t·ªïn th·∫•t (kWh)"].sum()
        actual_rate = (total_loss / total_input * 100) if total_input else 0.0
        plan_col = [col for col in df.columns if "k·∫ø ho·∫°ch" in col.lower()][0]
        plan_series = df[plan_col]
        plan_rate = (
            ((plan_series / 100) * df["ƒêi·ªán nh·∫≠n (kWh)"]).sum() / total_input * 100
            if total_input
            else 0.0
        )
        return round(actual_rate, 2), round(plan_rate, 2)
    except:
        return 0.0, 0.0

# ==== Giao di·ªán t·∫£i file ====
col_uploads = st.columns(3)
with col_uploads[0]:
    file_thang = st.file_uploader("üìÖ File Theo Th√°ng", type=["xlsx"], key="tba_thang")
with col_uploads[1]:
    file_luyke = st.file_uploader("üìä File L≈©y k·∫ø", type=["xlsx"], key="tba_luyke")
with col_uploads[2]:
    file_cungky = st.file_uploader("üìà File C√πng k·ª≥", type=["xlsx"], key="tba_ck")

uploaded_files = {
    "Theo Th√°ng": file_thang,
    "L≈©y k·∫ø": file_luyke,
    "C√πng k·ª≥": file_cungky,
}

# ==== Gh√©p ph√¢n t√≠ch nhi·ªÅu file v√†o b·∫£ng chung ====
combined_df = []
result_summary = []

for label, file in uploaded_files.items():
    if file:
        df = read_mapping_sheet(file)
        if df is not None:
            df["Ngu·ªìn d·ªØ li·ªáu"] = label
            combined_df.append(df)
            act, plan = calc_overall_rate(df)
            result_summary.append({"Lo·∫°i d·ªØ li·ªáu": label, "T·ªïn th·∫•t th·ª±c t·∫ø (%)": act, "T·ªïn th·∫•t k·∫ø ho·∫°ch (%)": plan})

if combined_df:
    st.markdown("<h3 style='font-size:20px;'>üìÑ B·∫£ng d·ªØ li·ªáu t·ªïng h·ª£p</h3>", unsafe_allow_html=True)
    final_df = pd.concat(combined_df, ignore_index=True)
    st.markdown("<style>div[data-testid='stDataFrame'] table {font-size: 16px;}</style>", unsafe_allow_html=True)
    st.dataframe(final_df, use_container_width=True)

    df_chart = pd.DataFrame(result_summary)
    st.markdown("#### üìâ So s√°nh t·ªïn th·∫•t gi·ªØa c√°c lo·∫°i d·ªØ li·ªáu")
    fig, ax = plt.subplots(figsize=(5, 2.5))
    x = np.arange(len(df_chart))
    width = 0.35
    ax.bar(x - width/2, df_chart["T·ªïn th·∫•t th·ª±c t·∫ø (%)"], width, label="Th·ª±c t·∫ø")
    ax.bar(x + width/2, df_chart["T·ªïn th·∫•t k·∫ø ho·∫°ch (%)"], width, label="K·∫ø ho·∫°ch")
    ax.set_xticks(x)
    ax.set_xticklabels(df_chart["Lo·∫°i d·ªØ li·ªáu"])
    ax.legend()
    for i in range(len(df_chart)):
        ax.text(x[i] - width/2, df_chart["T·ªïn th·∫•t th·ª±c t·∫ø (%)"][i] + 0.2, f"{df_chart["T·ªïn th·∫•t th·ª±c t·∫ø (%)"][i]:.2f}%", ha="center", fontsize=7)
        ax.text(x[i] + width/2, df_chart["T·ªïn th·∫•t k·∫ø ho·∫°ch (%)"][i] + 0.2, f"{df_chart["T·ªïn th·∫•t k·∫ø ho·∫°ch (%)"][i]:.2f}%", ha="center", fontsize=7)
    ax.set_ylim(0, max(df_chart[["T·ªïn th·∫•t th·ª±c t·∫ø (%)", "T·ªïn th·∫•t k·∫ø ho·∫°ch (%)"]].max()) * 1.4)
    st.pyplot(fig)
else:
    st.info("Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt file d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch.")
