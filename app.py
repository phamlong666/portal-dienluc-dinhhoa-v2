# app_tba_congcong.py
import streamlit as st
import pandas as pd
import requests
from io import BytesIO
from datetime import datetime
import matplotlib.pyplot as plt
import os
import re

st.set_page_config(layout="wide", page_title="Ph√¢n t√≠ch t·ªïn th·∫•t TBA c√¥ng c·ªông")
st.title("üìä Ph√¢n t√≠ch t·ªïn th·∫•t c√°c TBA c√¥ng c·ªông")

# ==== C·∫§U H√åNH CH·∫æ ƒê·ªò PH√ÇN T√çCH ====
col1, col2, col3 = st.columns(3)

with col1:
    mode = st.radio("Ch·∫ø ƒë·ªô ph√¢n t√≠ch", ["Theo th√°ng", "L≈©y k·∫ø", "So s√°nh c√πng k·ª≥", "L≈©y k·∫ø c√πng k·ª≥"])

with col2:
    thang_from = st.selectbox("T·ª´ th√°ng", list(range(1, 13)), index=0)
    if "L≈©y k·∫ø" in mode:
        thang_to = st.selectbox("ƒê·∫øn th√°ng", list(range(thang_from, 13)), index=4)
    else:
        thang_to = thang_from

with col3:
    nam = st.selectbox("Ch·ªçn nƒÉm", list(range(2020, datetime.now().year + 1))[::-1], index=0)

# ==== H√ÄM QU√âT DANH S√ÅCH FILE TR√äN GOOGLE DRIVE (FOLDER C√îNG KHAI) ====
FOLDER_URL = "https://drive.google.com/drive/folders/1o1O5jMhvJ6V2bqr6VdNoWTfXYiFYnl98"

def get_file_links_from_drive(folder_url):
    folder_id = folder_url.split("folders/")[-1].split("?")[0]
    st.write(f"ƒêang c·ªë g·∫Øng truy c·∫≠p th∆∞ m·ª•c Google Drive ID: {folder_id}")
    url = f"https://drive.google.com/drive/folders/{folder_id}"
    try:
        res = requests.get(url)
        res.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)
        st.write(f"Tr·∫°ng th√°i ph·∫£n h·ªìi URL th∆∞ m·ª•c Google Drive: {res.status_code}")
        
        # Ki·ªÉm tra n·ªôi dung ph·∫£n h·ªìi
        # st.text(res.text) # B·ªè comment d√≤ng n√†y ƒë·ªÉ xem to√†n b·ªô ph·∫£n h·ªìi HTML ƒë·ªÉ g·ª° l·ªói regex

        pattern = re.compile(r'"(https://drive.google.com/file/d/[^/]+)"')
        matches = pattern.findall(res.text)
        st.write(f"T√¨m th·∫•y {len(matches)} li√™n k·∫øt t·ªáp ti·ªÅm nƒÉng trong HTML.")
        files = {}
        for match in matches:
            file_id = match.split("/d/")[-1]
            file_name = get_filename_from_id(file_id)
            if file_name:
                files[file_name] = file_id
                st.write(f"  - T√¨m th·∫•y t·ªáp: {file_name} v·ªõi ID: {file_id}")
        st.write(f"T·ªïng s·ªë t·ªáp ƒë∆∞·ª£c x√°c ƒë·ªãnh t·ª´ Drive: {len(files)}")
        return files
    except requests.exceptions.RequestException as e:
        st.error(f"L·ªói khi truy c·∫≠p Google Drive folder URL: {e}. Vui l√≤ng ki·ªÉm tra URL v√† quy·ªÅn truy c·∫≠p th∆∞ m·ª•c.")
        return {}
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi l·∫•y li√™n k·∫øt t·ªáp t·ª´ Drive: {e}")
        return {}

def get_filename_from_id(file_id):
    url = f"https://drive.google.com/uc?export=download&id={file_id}"
    try:
        res = requests.get(url, stream=True)
        res.raise_for_status()
        if "Content-Disposition" in res.headers:
            cd = res.headers["Content-Disposition"]
            filename_match = re.findall('filename="?([^";]+)"?', cd)
            if filename_match:
                st.write(f"  - T√™n t·ªáp ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ header: {filename_match[0]}")
                return filename_match[0]
        st.write(f"  - Kh√¥ng th·ªÉ tr√≠ch xu·∫•t t√™n t·ªáp cho ID: {file_id}. Header Content-Disposition kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng ch·ª©a t√™n t·ªáp.")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"L·ªói khi t·∫£i xu·ªëng t√™n t·ªáp t·ª´ ID {file_id}: {e}. C√≥ th·ªÉ t·ªáp kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi l·∫•y t√™n t·ªáp t·ª´ ID {file_id}: {e}")
        return None

def download_excel_from_drive(file_id):
    download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
    try:
        response = requests.get(download_url)
        response.raise_for_status()
        st.write(f"  - Tr·∫°ng th√°i ph·∫£n h·ªìi URL t·∫£i xu·ªëng cho t·ªáp ID {file_id}: {response.status_code}")
        
        # Ki·ªÉm tra n·∫øu n·ªôi dung t·∫£i v·ªÅ l√† HTML (l·ªói) thay v√¨ file excel
        if "text/html" in response.headers.get("Content-Type", ""):
            st.error(f"N·ªôi dung t·∫£i v·ªÅ t·ª´ ID {file_id} l√† HTML, kh√¥ng ph·∫£i file Excel. C√≥ th·ªÉ l√† l·ªói quy·ªÅn truy c·∫≠p ho·∫∑c t·ªáp kh√¥ng ph·∫£i Excel.")
            return pd.DataFrame()

        df = pd.read_excel(BytesIO(response.content), sheet_name="d·ªØ li·ªáu")
        st.write(f"  - ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng t·ª´ t·ªáp ID {file_id}. K√≠ch th∆∞·ªõc DataFrame: {df.shape}")
        return df
    except requests.exceptions.RequestException as e:
        st.error(f"L·ªói khi t·∫£i xu·ªëng t·ªáp Excel t·ª´ ID {file_id}: {e}. T·ªáp c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ t·∫£i xu·ªëng.")
        return pd.DataFrame()
    except ValueError as e:
        st.error(f"L·ªói khi ƒë·ªçc t·ªáp Excel t·ª´ ID {file_id}: {e}. C√≥ th·ªÉ t√™n sheet 'd·ªØ li·ªáu' kh√¥ng t·ªìn t·∫°i ho·∫∑c t·ªáp b·ªã h·ªèng.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi t·∫£i ho·∫∑c ƒë·ªçc t·ªáp Excel t·ª´ ID {file_id}: {e}")
        return pd.DataFrame()

# ==== H√ÄM PH√ÇN T√çCH ====
def generate_filenames(year, start_month, end_month):
    return [f"TBA_{year}_{str(m).zfill(2)}.xlsx" for m in range(start_month, end_month + 1)]

def load_data_from_drive(file_list, drive_files):
    dfs = []
    st.write(f"ƒêang t·∫£i d·ªØ li·ªáu cho c√°c t·ªáp: {file_list}")
    for file in file_list:
        file_id = drive_files.get(file)
        if file_id:
            st.write(f"ƒêang t·∫£i t·ªáp: {file} (ID: {file_id})")
            df = download_excel_from_drive(file_id)
            if not df.empty:
                dfs.append(df)
            else:
                st.warning(f"T·ªáp '{file}' (ID: {file_id}) ƒë∆∞·ª£c t·∫£i v·ªÅ nh∆∞ng tr·ªëng ho·∫∑c c√≥ l·ªói khi ƒë·ªçc.")
        else:
            st.warning(f"Kh√¥ng t√¨m th·∫•y ID cho t·ªáp '{file}' trong danh s√°ch t·ªáp t·ª´ Google Drive. T·ªáp n√†y c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i ho·∫∑c t√™n kh√¥ng kh·ªõp.")
    
    if dfs:
        combined_df = pd.concat(dfs)
        st.write(f"ƒê√£ k·∫øt h·ª£p {len(dfs)} DataFrame. K√≠ch th∆∞·ªõc DataFrame cu·ªëi c√πng: {combined_df.shape}")
        return combined_df
    else:
        st.warning("Kh√¥ng c√≥ DataFrame n√†o ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng t·ª´ c√°c t·ªáp ƒë√£ ch·ªçn.")
        return pd.DataFrame()

# ==== X·ª¨ L√ù ====
st.markdown("---")
st.write("B·∫Øt ƒë·∫ßu qu√° tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu...")
drive_files = get_file_links_from_drive(FOLDER_URL)
if not drive_files:
    st.error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch t·ªáp t·ª´ Google Drive. Vui l√≤ng ki·ªÉm tra FOLDER_URL v√† quy·ªÅn truy c·∫≠p.")
    df = pd.DataFrame() # ƒê·∫£m b·∫£o df tr·ªëng n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c file

st.write(f"Ch·∫ø ƒë·ªô ph√¢n t√≠ch ƒë∆∞·ª£c ch·ªçn: {mode}")
st.write(f"NƒÉm: {nam}, T·ª´ th√°ng: {thang_from}, ƒê·∫øn th√°ng: {thang_to}")

df = pd.DataFrame() # Kh·ªüi t·∫°o df r·ªóng ƒë·ªÉ tr√°nh l·ªói n·∫øu kh√¥ng v√†o ƒë∆∞·ª£c c√°c ƒëi·ªÅu ki·ªán

if mode == "Theo th√°ng":
    files = generate_filenames(nam, thang_from, thang_from)
    st.write(f"T·ªáp c·∫ßn t√¨m cho ch·∫ø ƒë·ªô 'Theo th√°ng': {files}")
    df = load_data_from_drive(files, drive_files)

elif mode == "L≈©y k·∫ø":
    files = generate_filenames(nam, thang_from, thang_to)
    st.write(f"C√°c t·ªáp c·∫ßn t√¨m cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø': {files}")
    df = load_data_from_drive(files, drive_files)
    if not df.empty and "T√™n TBA" in df.columns:
        st.write("ƒêang nh√≥m d·ªØ li·ªáu theo 'T√™n TBA' cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø'.")
        df = df.groupby("T√™n TBA", as_index=False).sum(numeric_only=True)
    elif not df.empty and "T√™n TBA" not in df.columns:
        st.warning("C·ªôt 'T√™n TBA' kh√¥ng t√¨m th·∫•y trong d·ªØ li·ªáu cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø'. Kh√¥ng th·ªÉ nh√≥m d·ªØ li·ªáu.")

elif mode == "So s√°nh c√πng k·ª≥":
    files_now = generate_filenames(nam, thang_from, thang_from)
    files_last = generate_filenames(nam - 1, thang_from, thang_from)
    st.write(f"T·ªáp hi·ªán t·∫°i ({nam}) cho ch·∫ø ƒë·ªô 'So s√°nh c√πng k·ª≥': {files_now}")
    st.write(f"T·ªáp nƒÉm tr∆∞·ªõc ({nam-1}) cho ch·∫ø ƒë·ªô 'So s√°nh c√πng k·ª≥': {files_last}")
    df_now = load_data_from_drive(files_now, drive_files)
    df_last = load_data_from_drive(files_last, drive_files)
    if not df_now.empty and not df_last.empty:
        if "T√™n TBA" in df_now.columns and "T√™n TBA" in df_last.columns:
            st.write("ƒêang h·ª£p nh·∫•t d·ªØ li·ªáu cho ch·∫ø ƒë·ªô 'So s√°nh c√πng k·ª≥'.")
            # Ch·ªçn c√°c c·ªôt s·ªë c√≥ th·ªÉ t·ªìn t·∫°i ƒë·ªÉ tr√°nh l·ªói sum() n·∫øu ch√∫ng kh√¥ng c√≥
            cols_to_sum = [col for col in df_now.columns if pd.api.types.is_numeric_dtype(df_now[col]) or col == "T√™n TBA"]
            df_now_filtered = df_now[cols_to_sum]
            df_last_filtered = df_last[cols_to_sum] # √Åp d·ª•ng t∆∞∆°ng t·ª± cho df_last
            
            df = df_now_filtered.merge(df_last_filtered, on="T√™n TBA", suffixes=(f"_{nam}", f"_{nam-1}"))
            
            # ƒê·∫£m b·∫£o c√°c c·ªôt c·∫ßn t√≠nh to√°n t·ªìn t·∫°i tr∆∞·ªõc khi th·ª±c hi·ªán ph√©p t√≠nh
            col_dien_ton_that_nam = f"ƒêi·ªán t·ªïn th·∫•t_{nam}"
            col_dien_ton_that_nam_truoc = f"ƒêi·ªán t·ªïn th·∫•t_{nam-1}"
            
            if col_dien_ton_that_nam in df.columns and col_dien_ton_that_nam_truoc in df.columns:
                df["Ch√™nh l·ªách t·ªïn th·∫•t"] = df[col_dien_ton_that_nam] - df[col_dien_ton_that_nam_truoc]
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªôt '{col_dien_ton_that_nam}' ho·∫∑c '{col_dien_ton_that_nam_truoc}' ƒë·ªÉ t√≠nh to√°n 'Ch√™nh l·ªách t·ªïn th·∫•t'.")
        else:
            st.warning("C·ªôt 'T√™n TBA' kh√¥ng t√¨m th·∫•y trong m·ªôt trong c√°c DataFrame cho ch·∫ø ƒë·ªô 'So s√°nh c√πng k·ª≥'.")
    else:
        st.warning("M·ªôt trong c√°c DataFrame (hi·ªán t·∫°i ho·∫∑c nƒÉm tr∆∞·ªõc) tr·ªëng cho ch·∫ø ƒë·ªô 'So s√°nh c√πng k·ª≥'.")
        df = pd.DataFrame() # ƒê·∫£m b·∫£o df tr·ªëng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

elif mode == "L≈©y k·∫ø c√πng k·ª≥":
    files_now = generate_filenames(nam, thang_from, thang_to)
    files_last = generate_filenames(nam - 1, thang_from, thang_to)
    st.write(f"C√°c t·ªáp hi·ªán t·∫°i ({nam}) cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥': {files_now}")
    st.write(f"C√°c t·ªáp nƒÉm tr∆∞·ªõc ({nam-1}) cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥': {files_last}")
    df_now = load_data_from_drive(files_now, drive_files)
    df_last = load_data_from_drive(files_last, drive_files)
    if not df_now.empty and not df_last.empty:
        if "T√™n TBA" in df_now.columns and "T√™n TBA" in df_last.columns:
            st.write("ƒêang nh√≥m v√† h·ª£p nh·∫•t d·ªØ li·ªáu cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥'.")
            df_now_group = df_now.groupby("T√™n TBA", as_index=False).sum(numeric_only=True)
            df_last_group = df_last.groupby("T√™n TBA", as_index=False).sum(numeric_only=True)
            
            df = df_now_group.merge(df_last_group, on="T√™n TBA", suffixes=(f"_{nam}", f"_{nam-1}"))
            
            col_dien_ton_that_nam = f"ƒêi·ªán t·ªïn th·∫•t_{nam}"
            col_dien_ton_that_nam_truoc = f"ƒêi·ªán t·ªïn th·∫•t_{nam-1}"
            
            if col_dien_ton_that_nam in df.columns and col_dien_ton_that_nam_truoc in df.columns:
                df["Ch√™nh l·ªách t·ªïn th·∫•t"] = df[col_dien_ton_that_nam] - df[col_dien_ton_that_nam_truoc]
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªôt '{col_dien_ton_that_nam}' ho·∫∑c '{col_dien_ton_that_nam_truoc}' ƒë·ªÉ t√≠nh to√°n 'Ch√™nh l·ªách t·ªïn th·∫•t' trong ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥'.")
        else:
            st.warning("C·ªôt 'T√™n TBA' kh√¥ng t√¨m th·∫•y trong m·ªôt trong c√°c DataFrame ƒë√£ nh√≥m cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥'.")
    else:
        st.warning("M·ªôt trong c√°c DataFrame (hi·ªán t·∫°i ho·∫∑c nƒÉm tr∆∞·ªõc) tr·ªëng cho ch·∫ø ƒë·ªô 'L≈©y k·∫ø c√πng k·ª≥'.")
        df = pd.DataFrame() # ƒê·∫£m b·∫£o df tr·ªëng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

# ==== HI·ªÇN TH·ªä ====
st.markdown("---")
if not df.empty:
    st.write("DataFrame ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† kh√¥ng tr·ªëng. ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu.")
    st.dataframe(df, use_container_width=True)
    if "T·ª∑ l·ªá t·ªïn th·∫•t" in df.columns:
        st.write("C·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' ƒë∆∞·ª£c t√¨m th·∫•y. ƒêang t·∫°o bi·ªÉu ƒë·ªì.")
        fig, ax = plt.subplots(figsize=(10, 6)) # TƒÉng k√≠ch th∆∞·ªõc bi·ªÉu ƒë·ªì cho d·ªÖ nh√¨n
        df.plot(kind="bar", x="T√™n TBA", y="T·ª∑ l·ªá t·ªïn th·∫•t", ax=ax)
        ax.set_title("Bi·ªÉu ƒë·ªì t·ª∑ l·ªá t·ªïn th·∫•t c√°c TBA", fontsize=14, fontweight='bold', color='black')
        ax.set_ylabel("T·ª∑ l·ªá t·ªïn th·∫•t (%)", fontsize=12, fontweight='bold', color='black')
        ax.set_xlabel("T√™n TBA", fontsize=12, fontweight='bold', color='black')
        ax.tick_params(axis='x', labelrotation=90, labelcolor='black', labelsize=10)
        ax.tick_params(axis='y', labelcolor='black', labelsize=10)
        plt.tight_layout() # ƒêi·ªÅu ch·ªânh layout ƒë·ªÉ tr√°nh nh√£n b·ªã c·∫Øt
        st.pyplot(fig)
    else:
        st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' trong DataFrame. Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì.")
else:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p ho·∫∑c thi·∫øu t·ªáp Excel trong th∆∞ m·ª•c Google Drive.")
    st.write("DataFrame tr·ªëng. Vui l√≤ng ki·ªÉm tra c√°c ƒë∆∞·ªùng d·∫´n t·ªáp, t√™n t·ªáp v√† n·ªôi dung trong Google Drive.")