import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
from docx import Document
from docx.shared import Inches
from pptx import Presentation
from pptx.util import Inches as PPT_Inches
from fpdf import FPDF

st.set_page_config(page_title="B√°o c√°o t·ªïn th·∫•t TBA", layout="wide")

st.title("üì• T·∫£i d·ªØ li·ªáu ƒë·∫ßu v√†o - B√°o c√°o t·ªïn th·∫•t")
st.markdown("### üîç Ch·ªçn lo·∫°i d·ªØ li·ªáu t·ªïn th·∫•t ƒë·ªÉ t·∫£i l√™n:")
with st.expander("üîå T·ªïn th·∫•t c√°c TBA c√¥ng c·ªông"):
    file_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - Theo th√°ng", type=["xlsx"], key="tba_thang")
    file_luyke = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - L≈©y k·∫ø", type=["xlsx"], key="tba_luyke")
    file_cungky = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - C√πng k·ª≥", type=["xlsx"], key="tba_ck")

def read_mapping_sheet(uploaded_file):
    xls = pd.ExcelFile(uploaded_file)
    sheet_name = None
    for name in xls.sheet_names:
        if name.strip().lower() == "b·∫£ng k·∫øt qu·∫£ √°nh x·∫° d·ªØ li·ªáu".lower():
            sheet_name = name
            break
    if sheet_name is None:
        st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y sheet 'B·∫£ng K·∫øt qu·∫£ √°nh x·∫° d·ªØ li·ªáu' trong file {uploaded_file.name}")
        return None
    df = pd.read_excel(xls, sheet_name=sheet_name)
    # ƒê·∫£m b·∫£o c√°c c·ªôt s·ªë d·∫°ng Int (lo·∫°i Int64 ƒë·ªÉ gi·ªØ gi√° tr·ªã tr·ªëng n·∫øu c√≥)
    num_cols = ["C√¥ng su·∫•t (KVA)", "S·ªë KH", "ƒêi·ªán nh·∫≠n (kWh)", "ƒêi·ªán th∆∞∆°ng ph·∫©m (kWh)", "ƒêi·ªán t·ªïn th·∫•t (kWh)"]
    for col in num_cols:
        if col in df.columns:
            df[col] = df[col].round(0).astype("Int64")
    return df

if file_thang and file_luyke and file_cungky:
    df_thang = read_mapping_sheet(file_thang)
    df_luyke = read_mapping_sheet(file_luyke)
    df_cungky = read_mapping_sheet(file_cungky)
    if df_thang is not None and df_luyke is not None and df_cungky is not None:
        # ƒê·ªãnh d·∫°ng c√°c c·ªôt % (2 decimal, d·∫•u ph·∫©y, th√™m %)
        format_percent = lambda x: (f"{x:.2f}".replace('.', ',') + '%') if pd.notna(x) else ""
        percent_cols = ["T·ª∑ l·ªá t·ªïn th·∫•t (%)", "K·∫ø ho·∫°ch (%)", "So s√°nh (%)"]
        for df in [df_thang, df_luyke, df_cungky]:
            for col in percent_cols:
                if col in df.columns:
                    # Chuy·ªÉn chu·ªói "x,xx%" v·ªÅ s·ªë float tr∆∞·ªõc khi ƒë·ªãnh d·∫°ng l·∫°i, n·∫øu ƒë√£ ƒë·ªãnh d·∫°ng s·∫µn
                    if isinstance(df[col].iloc[0], str):
                        df[col] = df[col].str.replace('%','').str.replace(',','.').astype(float)
                    df[col] = df[col].map(format_percent)

        st.markdown("### üìä B·∫£ng K·∫øt qu·∫£ √°nh x·∫° d·ªØ li·ªáu:")
        with st.expander("D·ªØ li·ªáu TBA c√¥ng c·ªông - Theo Th√°ng", expanded=False):
            st.dataframe(df_thang, use_container_width=True)
        with st.expander("D·ªØ li·ªáu TBA c√¥ng c·ªông - L≈©y k·∫ø", expanded=False):
            st.dataframe(df_luyke, use_container_width=True)
        with st.expander("D·ªØ li·ªáu TBA c√¥ng c·ªông - C√πng k·ª≥", expanded=False):
            st.dataframe(df_cungky, use_container_width=True)

        # T√≠nh t·ª∑ l·ªá t·ªïn th·∫•t th·ª±c t·∫ø v√† k·∫ø ho·∫°ch cho t·ª´ng k·ª≥
        def calc_overall_rate(df):
            total_input = df["ƒêi·ªán nh·∫≠n (kWh)"].sum()
            total_loss = df["ƒêi·ªán t·ªïn th·∫•t (kWh)"].sum()
            actual_rate = (total_loss / total_input * 100) if total_input else 0.0
            plan_rate = 0.0
            if total_input:
                # Chuy·ªÉn gi√° tr·ªã k·∫ø ho·∫°ch (%) v·ªÅ s·ªë ƒë·ªÉ t√≠nh trung b√¨nh gia quy·ªÅn
                plan_series = df["K·∫ø ho·∫°ch (%)"]
                if isinstance(plan_series.iloc[0], str):
                    plan_series = plan_series.str.replace('%','').str.replace(',','.').astype(float)
                plan_rate = ((plan_series/100) * df["ƒêi·ªán nh·∫≠n (kWh)"]).sum() / total_input * 100
            return actual_rate, plan_rate

        act_thang, plan_thang = calc_overall_rate(df_thang)
        act_luyke, plan_luyke = calc_overall_rate(df_luyke)
        act_cungky, plan_cungky = calc_overall_rate(df_cungky)

        # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt (Th·ª±c t·∫ø vs K·∫ø ho·∫°ch cho Th√°ng, L≈©y k·∫ø, C√πng k·ª≥)
        categories = ["Th√°ng", "L≈©y k·∫ø", "C√πng k·ª≥"]
        actuals = [act_thang, act_luyke, act_cungky]
        plans   = [plan_thang, plan_luyke, plan_cungky]
        fig_bar, ax = plt.subplots(figsize=(4,3))
        x = np.arange(len(categories))
        width = 0.35
        bars1 = ax.bar(x - width/2, actuals, width, label="Th·ª±c t·∫ø")
        bars2 = ax.bar(x + width/2, plans,  width, label="K·∫ø ho·∫°ch")
        ax.set_xticks(x); ax.set_xticklabels(categories)
        ax.set_ylabel("T·ª∑ l·ªá t·ªïn th·∫•t (%)")
        ax.set_title("So s√°nh T·ª∑ l·ªá t·ªïn th·∫•t Th·ª±c t·∫ø vs K·∫ø ho·∫°ch")
        ax.legend()
        # G·∫Øn nh√£n gi√° tr·ªã tr√™n c·ªôt
        for bar in bars1:
            h = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, h + 0.1,
                    f"{h:.2f}".replace('.', ',') + '%',
                    ha='center', va='bottom', fontsize=8)
        for bar in bars2:
            h = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, h + 0.1,
                    f"{h:.2f}".replace('.', ',') + '%',
                    ha='center', va='bottom', fontsize=8)

        # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n (t·ª∑ tr·ªçng ƒëi·ªán th∆∞∆°ng ph·∫©m vs t·ªïn th·∫•t cho L≈©y k·∫ø)
        labels = ["ƒêi·ªán th∆∞∆°ng ph·∫©m", "ƒêi·ªán t·ªïn th·∫•t"]
        values = [df_luyke["ƒêi·ªán th∆∞∆°ng ph·∫©m (kWh)"].sum(), df_luyke["ƒêi·ªán t·ªïn th·∫•t (kWh)"].sum()]
        fig_pie, ax2 = plt.subplots(figsize=(3,3))
        def autopct_format(pct):
            return f"{pct:.2f}".replace('.', ',') + '%'
        ax2.pie(values, autopct=autopct_format, startangle=90, colors=["#4E79A7", "#F28E2B"])
        ax2.axis('equal')
        ax2.set_title("T·ª∑ tr·ªçng ƒêi·ªán th∆∞∆°ng ph·∫©m vs T·ªïn th·∫•t (L≈©y k·∫ø)")
        formatted_vals = [format(val, ",").replace(",", ".") for val in values]
        legend_texts = [f"{labels[i]}: {formatted_vals[i]} kWh" for i in range(len(labels))]
        ax2.legend(legend_texts, loc="best")

        st.markdown("### üìâ Bi·ªÉu ƒë·ªì minh h·ªça k·∫øt qu·∫£:")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.pyplot(fig_bar)
        with col2:
            st.pyplot(fig_pie)

        # T·∫°o file b√°o c√°o Word, PDF, PPT
        doc = Document()
        doc.add_heading("B√°o c√°o t·ªïn th·∫•t TBA c√¥ng c·ªông", 0)
        doc.add_paragraph(f"T·ª∑ l·ªá t·ªïn th·∫•t l≈©y k·∫ø: {act_luyke:.2f}% (K·∫ø ho·∫°ch: {plan_luyke:.2f}%)".replace('.', ','))
        doc.add_paragraph("Bi·ªÉu ƒë·ªì so s√°nh t·ª∑ l·ªá t·ªïn th·∫•t:")
        img_bar = io.BytesIO(); fig_bar.savefig(img_bar, format='png'); img_bar.seek(0)
        doc.add_picture(img_bar, width=Inches(4))
        doc.add_paragraph("Bi·ªÉu ƒë·ªì t·ª∑ tr·ªçng ƒëi·ªán th∆∞∆°ng ph·∫©m vs t·ªïn th·∫•t:")
        img_pie = io.BytesIO(); fig_pie.savefig(img_pie, format='png'); img_pie.seek(0)
        doc.add_picture(img_pie, width=Inches(4))
        doc_buffer = io.BytesIO(); doc.save(doc_buffer)
        doc_bytes = doc_buffer.getvalue()

        prs = Presentation()
        slide_layout = prs.slide_layouts[5]
        slide = prs.slides.add_slide(slide_layout)
        title_shape = slide.shapes.title or slide.shapes.add_textbox(PPT_Inches(0.5), PPT_Inches(0.5), PPT_Inches(9), PPT_Inches(1)).text_frame
        title_shape.text = "B√°o c√°o t·ªïn th·∫•t TBA c√¥ng c·ªông"
        slide.shapes.add_picture(img_bar, PPT_Inches(0.5), PPT_Inches(1.5), width=PPT_Inches(4))
        slide.shapes.add_picture(img_pie, PPT_Inches(5.5), PPT_Inches(1.5), width=PPT_Inches(4))
        prs_buffer = io.BytesIO(); prs.save(prs_buffer)
        ppt_bytes = prs_buffer.getvalue()

        pdf = FPDF()
        pdf.add_page()
        pdf.add_font('DejaVu', '', 'DejaVuSans.ttf', uni=True)
        pdf.set_font('DejaVu', size=12)
        pdf.cell(0, 10, "B√°o c√°o t·ªïn th·∫•t TBA c√¥ng c·ªông", ln=1, align="C")
        pdf.cell(0, 10, f"T·ª∑ l·ªá t·ªïn th·∫•t l≈©y k·∫ø: {act_luyke:.2f}% (K·∫ø ho·∫°ch: {plan_luyke:.2f}%)".replace('.', ','), ln=1)
        img_bar.seek(0); img_pie.seek(0)
        with open("chart_bar.png", "wb") as f: f.write(img_bar.getvalue())
        with open("chart_pie.png", "wb") as f: f.write(img_pie.getvalue())
        pdf.image("chart_bar.png", x=10, y=50, w=90)
        pdf.image("chart_pie.png", x=110, y=50, w=90)
        pdf_bytes = pdf.output(dest='S').encode('latin-1')

        st.download_button("‚¨áÔ∏è T·∫£i b√°o c√°o (Word)", data=doc_bytes, file_name="BaoCao_TBA.docx",
                           mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")
        st.download_button("‚¨áÔ∏è T·∫£i b√°o c√°o (PDF)", data=pdf_bytes, file_name="BaoCao_TBA.pdf", mime="application/pdf")
        st.download_button("‚¨áÔ∏è T·∫£i b√°o c√°o (PowerPoint)", data=ppt_bytes, file_name="BaoCao_TBA.pptx",
                           mime="application/vnd.openxmlformats-officedocument.presentationml.presentation")
else:
    st.info("H√£y t·∫£i l√™n ƒë·∫ßy ƒë·ªß 3 file d·ªØ li·ªáu (Th√°ng, L≈©y k·∫ø, C√πng k·ª≥) ƒë·ªÉ xem k·∫øt qu·∫£.")
