# app.py - C·∫≠p nh·∫≠t l·∫•y d·ªØ li·ªáu t·ª´ Google Sheets
import streamlit as st
import pandas as pd
import requests
from io import BytesIO
from datetime import datetime
import matplotlib.pyplot as plt

st.set_page_config(layout="wide", page_title="Ph√¢n t√≠ch t·ªïn th·∫•t TBA c√¥ng c·ªông")
st.title("üìä Ph√¢n t√≠ch t·ªïn th·∫•t c√°c TBA c√¥ng c·ªông")

# ==== C·∫§U H√åNH CH·∫æ ƒê·ªò PH√ÇN T√çCH ====
col1, col2, col3 = st.columns(3)

with col1:
    mode = st.radio("Ch·∫ø ƒë·ªô ph√¢n t√≠ch", ["Theo th√°ng", "L≈©y k·∫ø", "So s√°nh c√πng k·ª≥", "L≈©y k·∫ø c√πng k·ª≥"])

with col2:
    thang_from = st.selectbox("T·ª´ th√°ng", list(range(1, 13)), index=0)
    if "L≈©y k·∫ø" in mode:
        thang_to = st.selectbox("ƒê·∫øn th√°ng", list(range(thang_from, 13)), index=4)
    else:
        thang_to = thang_from

with col3:
    nam = st.selectbox("Ch·ªçn nƒÉm", list(range(2020, datetime.now().year + 1))[::-1], index=0)

# ==== ƒê·ªåC DANH S√ÅCH FILE T·ª™ GOOGLE SHEET ====
SHEET_ID = "1Dawt9EdBWkToRZoUJKuD2AENOOk1weEXqdOwtZPZdJ0"
SHEET_NAME = "Danh_sach_file"
URL_CSV = f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/gviz/tq?tqx=out:csv&sheet={SHEET_NAME}"

@st.cache_data

def load_file_list():
    try:
        df_file = pd.read_csv(URL_CSV)
        df_file = df_file[df_file["T√™n file"].str.endswith(".xlsx")]
        return df_file.set_index("T√™n file")["Link t·∫£i"].to_dict()
    except:
        return {}

# ==== T·∫¢I FILE EXCEL ====
def download_excel_from_url(url):
    try:
        r = requests.get(url)
        if r.status_code == 200:
            return pd.read_excel(BytesIO(r.content), sheet_name="d·ªØ li·ªáu")
    except:
        pass
    return pd.DataFrame()

@st.cache_data

def generate_filenames(year, start_month, end_month):
    return [f"TBA_{year}_{str(m).zfill(2)}.xlsx" for m in range(start_month, end_month + 1)]

@st.cache_data

def load_data(file_list, file_links):
    dfs = []
    for fname in file_list:
        if fname in file_links:
            df = download_excel_from_url(file_links[fname])
            if not df.empty:
                dfs.append(df)
    return pd.concat(dfs) if dfs else pd.DataFrame()

# ==== X·ª¨ L√ù ====
df_file_links = load_file_list()

if mode == "Theo th√°ng":
    files = generate_filenames(nam, thang_from, thang_from)
    df = load_data(files, df_file_links)

elif mode == "L≈©y k·∫ø":
    files = generate_filenames(nam, thang_from, thang_to)
    df = load_data(files, df_file_links)
    if not df.empty and "T√™n TBA" in df.columns:
        df = df.groupby("T√™n TBA", as_index=False).sum()

elif mode == "So s√°nh c√πng k·ª≥":
    files_now = generate_filenames(nam, thang_from, thang_from)
    files_last = generate_filenames(nam - 1, thang_from, thang_from)
    df_now = load_data(files_now, df_file_links)
    df_last = load_data(files_last, df_file_links)
    if not df_now.empty and not df_last.empty:
        df = df_now.merge(df_last, on="T√™n TBA", suffixes=(f"_{nam}", f"_{nam-1}"))
        df["Ch√™nh l·ªách t·ªïn th·∫•t"] = df[f"ƒêi·ªán t·ªïn th·∫•t_{nam}"] - df[f"ƒêi·ªán t·ªïn th·∫•t_{nam-1}"]
    else:
        df = pd.DataFrame()

elif mode == "L≈©y k·∫ø c√πng k·ª≥":
    files_now = generate_filenames(nam, thang_from, thang_to)
    files_last = generate_filenames(nam - 1, thang_from, thang_to)
    df_now = load_data(files_now, df_file_links)
    df_last = load_data(files_last, df_file_links)
    if not df_now.empty and not df_last.empty:
        df_now_group = df_now.groupby("T√™n TBA", as_index=False).sum()
        df_last_group = df_last.groupby("T√™n TBA", as_index=False).sum()
        df = df_now_group.merge(df_last_group, on="T√™n TBA", suffixes=(f"_{nam}", f"_{nam-1}"))
        df["Ch√™nh l·ªách t·ªïn th·∫•t"] = df[f"ƒêi·ªán t·ªïn th·∫•t_{nam}"] - df[f"ƒêi·ªán t·ªïn th·∫•t_{nam-1}"]
    else:
        df = pd.DataFrame()

# ==== HI·ªÇN TH·ªä ====
st.markdown("---")
if not df.empty:
    st.dataframe(df, use_container_width=True)
    if "T·ª∑ l·ªá t·ªïn th·∫•t" in df.columns:
        fig, ax = plt.subplots()
        df.plot(kind="bar", x="T√™n TBA", y="T·ª∑ l·ªá t·ªïn th·∫•t", ax=ax)
        ax.set_title("Bi·ªÉu ƒë·ªì t·ª∑ l·ªá t·ªïn th·∫•t c√°c TBA", fontsize=14, fontweight='bold', color='black')
        ax.set_ylabel("T·ª∑ l·ªá t·ªïn th·∫•t (%)", fontsize=12, fontweight='bold', color='black')
        ax.set_xlabel("T√™n TBA", fontsize=12, fontweight='bold', color='black')
        ax.tick_params(axis='x', labelrotation=90, labelcolor='black', labelsize=10)
        ax.tick_params(axis='y', labelcolor='black', labelsize=10)
        st.pyplot(fig)
else:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p ho·∫∑c thi·∫øu t·ªáp Excel theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu.")