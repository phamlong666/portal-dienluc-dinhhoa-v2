from pathlib import Path
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
from docx import Document
from docx.shared import Inches
from fpdf import FPDF
from pptx import Presentation
from pptx.util import Inches as PPTInches, Pt

st.set_page_config(page_title="B√°o c√°o t·ªïn th·∫•t TBA", layout="wide")
st.title("üìä B√°o c√°o t·ªïn th·∫•t c√°c TBA c√¥ng c·ªông")

# ====== Session State ======
if "uploaded_data" not in st.session_state:
    st.session_state.uploaded_data = {"Theo Th√°ng": None, "L≈©y k·∫ø": None, "C√πng k·ª≥": None}

# ====== H√†m ƒë·ªçc v√† x·ª≠ l√Ω file √°nh x·∫° ======
def read_mapping_sheet(uploaded_file):
    try:
        xls = pd.ExcelFile(uploaded_file)
        sheet_name = [s for s in xls.sheet_names if "√°nh x·∫°" in s.lower()][0]
        df = pd.read_excel(xls, sheet_name=sheet_name)

        percent_cols = [col for col in df.columns if "%" in col or "t·ª∑ l·ªá" in col.lower()]
        for col in percent_cols:
            df[col] = pd.to_numeric(df[col].astype(str).str.replace("%", "", regex=False)
                                     .str.replace(",", ".", regex=False)
                                     .replace("", np.nan), errors="coerce")

        float_cols = df.select_dtypes(include=[np.number]).columns
        df[float_cols] = df[float_cols].apply(lambda x: np.round(x, 2))
        return df
    except Exception as e:
        st.warning(f"L·ªói ƒë·ªçc file {uploaded_file.name}: {e}")
        return None

# ====== Giao di·ªán t·∫£i file ======
col1, col2, col3 = st.columns(3)
with col1:
    file_thang = st.file_uploader("üìÖ T·∫£i File Theo Th√°ng", type="xlsx")
    if file_thang: st.session_state.uploaded_data["Theo Th√°ng"] = file_thang
with col2:
    file_luyke = st.file_uploader("üìä T·∫£i File L≈©y K·∫ø", type="xlsx")
    if file_luyke: st.session_state.uploaded_data["L≈©y k·∫ø"] = file_luyke
with col3:
    file_cungky = st.file_uploader("üìà T·∫£i File C√πng K·ª≥", type="xlsx")
    if file_cungky: st.session_state.uploaded_data["C√πng k·ª≥"] = file_cungky

if st.button("üîÑ L√†m m·ªõi"):
    st.session_state.uploaded_data = {"Theo Th√°ng": None, "L≈©y k·∫ø": None, "C√πng k·ª≥": None}
    st.experimental_rerun()

# ====== H√†m t√≠nh to√°n ======
def calc_overall_rate(df):
    input_col = [c for c in df.columns if "ƒëi·ªán nh·∫≠n" in c.lower()]
    loss_col = [c for c in df.columns if "t·ªïn th·∫•t" in c.lower() and "kwh" in c.lower()]
    plan_col = [c for c in df.columns if "k·∫ø ho·∫°ch" in c.lower()]
    if not input_col or not loss_col:
        return 0.0, 0.0
    total_input = df[input_col[0]].sum()
    total_loss = df[loss_col[0]].sum()
    actual = (total_loss / total_input * 100) if total_input else 0.0
    plan = df[plan_col[0]].mean() if plan_col else 0.0
    return round(actual, 2), round(plan, 2)

# ====== Hi·ªÉn th·ªã d·ªØ li·ªáu ======
chart_data = {}
for label, file in st.session_state.uploaded_data.items():
    if file:
        df = read_mapping_sheet(file)
        st.markdown(f"<h3 style='font-size:22px; color:blue;'>üìÇ D·ªØ li·ªáu t·ªïn th·∫•t - {label}</h3>", unsafe_allow_html=True)
        st.dataframe(df.style.set_properties(**{'font-size': '16px'}), use_container_width=True, height=350)

        actual, plan = calc_overall_rate(df)
        chart_data[label] = (actual, plan)

        st.markdown(f"<h4 style='font-size:18px;'>üìâ Bi·ªÉu ƒë·ªì t·ªïn th·∫•t - {label}</h4>", unsafe_allow_html=True)
        fig, ax = plt.subplots(figsize=(2, 1))
        bars = ax.bar(["Th·ª±c hi·ªán", "K·∫ø ho·∫°ch"], [actual, plan], color=["#1976D2", "#FFC107"])
        ax.set_ylim(0, max(actual, plan) * 1.5 + 1)
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, height + 0.1, f"{height:.2f}%", ha='center', fontsize=6)
        st.pyplot(fig)

# ====== Bi·ªÉu ƒë·ªì t·ªïng h·ª£p so s√°nh ======
if chart_data:
    st.markdown("<h3 style='font-size:20px;'>üìä Bi·ªÉu ƒë·ªì so s√°nh t·ªïng h·ª£p</h3>", unsafe_allow_html=True)
    fig, ax = plt.subplots(figsize=(3, 2))
    labels = list(chart_data.keys())
    actuals = [v[0] for v in chart_data.values()]
    plans = [v[1] for v in chart_data.values()]
    width = 0.35
    x = np.arange(len(labels))
    ax.bar(x - width/2, actuals, width, label='Th·ª±c hi·ªán')
    ax.bar(x + width/2, plans, width, label='K·∫ø ho·∫°ch')
    ax.set_xticks(x)
    ax.set_xticklabels(labels)
    ax.legend()
    st.pyplot(fig)

# ====== Xu·∫•t b√°o c√°o ======
def export_docx(data):
    doc = Document()
    doc.add_heading("B√°o c√°o t·ªïn th·∫•t TBA", 0)
    for label, (actual, plan) in data.items():
        doc.add_heading(f"{label}", level=1)
        doc.add_paragraph(f"T·ª∑ l·ªá t·ªïn th·∫•t th·ª±c hi·ªán: {actual}%")
        doc.add_paragraph(f"T·ª∑ l·ªá t·ªïn th·∫•t k·∫ø ho·∫°ch: {plan}%")
    buf = io.BytesIO()
    doc.save(buf)
    st.download_button("üìÑ T·∫£i b√°o c√°o Word", data=buf.getvalue(), file_name="bao_cao_ton_that.docx")

def export_pdf(data):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="B√°o c√°o t·ªïn th·∫•t TBA", ln=1, align='C')
    for label, (actual, plan) in data.items():
        pdf.cell(200, 10, txt=f"{label}: Th·ª±c hi·ªán {actual}%, K·∫ø ho·∫°ch {plan}%", ln=1)
    buf = io.BytesIO()
    pdf.output(buf)
    st.download_button("üìÑ T·∫£i b√°o c√°o PDF", data=buf.getvalue(), file_name="bao_cao_ton_that.pdf")

def export_pptx(data):
    ppt = Presentation()
    slide_layout = ppt.slide_layouts[1]
    slide = ppt.slides.add_slide(slide_layout)
    slide.shapes.title.text = "B√°o c√°o t·ªïn th·∫•t TBA"
    content = ""
    for label, (actual, plan) in data.items():
        content += f"{label}: Th·ª±c hi·ªán {actual}%, K·∫ø ho·∫°ch {plan}%\n"
    slide.placeholders[1].text = content
    buf = io.BytesIO()
    ppt.save(buf)
    st.download_button("üìä T·∫£i b√°o c√°o PowerPoint", data=buf.getvalue(), file_name="bao_cao_ton_that.pptx")

if chart_data:
    export_docx(chart_data)
    export_pdf(chart_data)
    export_pptx(chart_data)

# ====== G·ª£i √Ω ti·∫øp ======
st.markdown("""
---
üìå **G·ª£i √Ω:** C√≥ th·ªÉ th√™m ph√¢n t√≠ch theo ng∆∞·ª°ng t·ªïn th·∫•t ho·∫∑c xu·∫•t b·∫£ng chi ti·∫øt t·ª´ng TBA theo y√™u c·∫ßu.
""")
