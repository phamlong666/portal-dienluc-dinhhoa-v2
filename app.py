from pathlib import Path
import streamlit as st
st.set_page_config(page_title="C·ªïng ƒëi·ªÅu h√†nh s·ªë - ph·∫ßn m·ªÅm ƒêi·ªán l·ª±c ƒê·ªãnh H√≥a", layout="wide")

import streamlit as st
import pandas as pd
from PIL import Image
import datetime

# ================== CUSTOM CSS ==================
st.markdown("""
""", unsafe_allow_html=True)

# ================== HEADER ==================
col1, col2 = st.columns([1, 10])
with col1:

with col2:

# ================== MENU T·ª™ GOOGLE SHEET ==================
sheet_url = "https://docs.google.com/spreadsheets/d/18kYr8DmDLnUUYzJJVHxzit5KCY286YozrrrIpOeojXI/gviz/tq?tqx=out:csv"
try:

except Exception as e:

# ================== GI·ªöI THI·ªÜU ==================
st.info("""
üëã Ch√†o m·ª´ng anh Long ƒë·∫øn v·ªõi Trung t√¢m ƒëi·ªÅu h√†nh s·ªë - ph·∫ßn m·ªÅm ƒêi·ªán l·ª±c ƒê·ªãnh H√≥a

üìå **C√°c t√≠nh nƒÉng n·ªïi b·∫≠t:**
- Ph√¢n t√≠ch th·∫•t b·∫°i, b√°o c√°o k·ªπ thu·∫≠t
- L∆∞u tr·ªØ v√† truy xu·∫•t l·ªãch s·ª≠ GPT
- Truy c·∫≠p h·ªá th·ªëng nhanh ch√≥ng qua Sidebar

‚úÖ M·ªçi b·∫£n c·∫≠p nh·∫≠t ch·ªâ c·∫ßn ch·ªânh s·ª≠a Google Sheet ƒë·ªÅu t·ª± ƒë·ªông hi·ªÉn th·ªã!
""")

# ================== N√öT CH·ª®C NƒÇNG CH√çNH ==================
st.markdown("<br>", unsafe_allow_html=True)
st.markdown("""
<div style="display: flex; justify-content: center; flex-wrap: wrap;">
</div>
""", unsafe_allow_html=True)



import streamlit as st
import pandas as pd
import os
import io
from datetime import date, time, datetime
from PIL import Image

st.set_page_config(page_title="C·ªïng ƒëi·ªÅu h√†nh s·ªë - ph·∫ßn m·ªÅm ƒêi·ªán l·ª±c ƒê·ªãnh H√≥a", layout="wide")

# ===== FILE L∆ØU D·ªÆ LI·ªÜU =====
REMINDERS_FILE = "nhac_viec.csv"
MEETINGS_FILE = "lich_su_cuoc_hop.csv"
UPLOAD_FOLDER = "uploaded_files"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

EMAIL_MAC_DINH = "phamlong666@gmail.com"


# ========== MODULE CH·ªåN CH·ª®C NƒÇNG ==========

st.markdown("## üìÇ Ch·ªçn ch·ª©c nƒÉng l√†m vi·ªác")
mod_option = st.selectbox("üìå Vui l√≤ng ch·ªçn module", ["Trang ch·ªß", "Nh·∫Øc vi·ªác", "Ph·ª•c v·ª• h·ªçp", "D·ª± b√°o ƒëi·ªÉm s·ª± c·ªë"])

if mod_option == "Trang ch·ªß":

if mod_option == "Nh·∫Øc vi·ªác":
    
    st.header("‚è∞ Nh·∫Øc vi·ªác")
    
    # T·∫°o m·ªõi danh s√°ch
    if st.button("üÜï T·∫°o m·ªõi danh s√°ch nh·∫Øc vi·ªác"):
        df = pd.DataFrame(columns=["Vi·ªác", "Ng√†y", "Gi·ªù", "Email"])
        df.to_csv(REMINDERS_FILE, index=False)
        st.success("‚úÖ ƒê√£ kh·ªüi t·∫°o danh s√°ch.")
    
    # Th√™m vi·ªác
    with st.expander("‚ûï Th√™m vi·ªác c·∫ßn nh·∫Øc"):
        with st.form("form_nhac"):
            viec = st.text_input("üîî Vi·ªác c·∫ßn nh·∫Øc")
            ngay = st.date_input("üìÖ Ng√†y", date.today())
            gio = st.time_input("‚è∞ Gi·ªù", time(7, 30))
            email = st.text_input("üìß G·ª≠i t·ªõi", value=EMAIL_MAC_DINH)
            submit = st.form_submit_button("üìå T·∫°o nh·∫Øc vi·ªác")
        if submit:
            new_row = {
                "Vi·ªác": viec,
                "Ng√†y": ngay.strftime("%d/%m/%y"),
                "Gi·ªù": gio.strftime("%H:%M"),
                "Email": email
            }
            df = pd.read_csv(REMINDERS_FILE) if os.path.exists(REMINDERS_FILE) else pd.DataFrame()
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            df.to_csv(REMINDERS_FILE, index=False)
            st.success("‚úÖ ƒê√£ t·∫°o nh·∫Øc vi·ªác.")
    
    # Hi·ªÉn th·ªã & x√≥a
    if os.path.exists(REMINDERS_FILE):
        st.subheader("üìã Danh s√°ch nh·∫Øc vi·ªác")
        try:
            df = pd.read_csv(REMINDERS_FILE, dtype=str)
            for idx, row in df.iterrows():
                col1, col2 = st.columns([6,1])
                with col1:
                    st.write(f"üìå **{row['Vi·ªác']}** l√∫c {row['Gi·ªù']} ng√†y {row['Ng√†y']} ‚Üí {row['Email']}")
                with col2:
                    if st.button("‚ùå", key=f"xoa_{idx}"):
                        df.drop(index=idx, inplace=True)
                        df.to_csv(REMINDERS_FILE, index=False)
                        st.rerun()
        except Exception as e:
            st.error(f"‚ùå L·ªói khi hi·ªÉn th·ªã nh·∫Øc vi·ªác: {e}")
    
    # Xu·∫•t / Nh·∫≠p Excel
    st.markdown("### üì§ Xu·∫•t / Nh·∫≠p Excel (Nh·∫Øc vi·ªác)")
    col1, col2 = st.columns(2)
    
    with col1:
        if os.path.exists(REMINDERS_FILE):
            df_export = pd.read_csv(REMINDERS_FILE)
            towrite = io.BytesIO()
            with pd.ExcelWriter(towrite, engine='xlsxwriter') as writer:
                df_export.to_excel(writer, index=False, sheet_name='NhacViec')
            st.download_button("üì• T·∫£i Excel", data=towrite.getvalue(), file_name="nhac_viec.xlsx")
    
    with col2:
        file = st.file_uploader("üìÇ Nh·∫≠p t·ª´ Excel", type=["xlsx"], key="upload_nhacviec")
        if file:
            try:
                df = pd.read_excel(file, dtype=str)
                # Chu·∫©n ho√° ng√†y gi·ªù n·∫øu c√≥ th·ªÉ
                df["Ng√†y"] = pd.to_datetime(df["Ng√†y"], errors="coerce").dt.strftime("%d/%m/%y")
                df["Gi·ªù"] = df["Gi·ªù"].fillna("00:00")
                df.to_csv(REMINDERS_FILE, index=False)
                st.success("‚úÖ ƒê√£ nh·∫≠p l·∫°i danh s√°ch.")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå L·ªói khi nh·∫≠p file Excel: {e}")
    
elif mod_option == "Ph·ª•c v·ª• h·ªçp":
    
    st.header("üìë Ph·ª•c v·ª• h·ªçp")
    
    with st.expander("‚ûï Th√™m cu·ªôc h·ªçp m·ªõi"):
        with st.form("form_hop"):
            ten = st.text_input("üìå T√™n cu·ªôc h·ªçp")
            ngay = st.date_input("üìÖ Ng√†y h·ªçp")
            gio = st.time_input("‚è∞ Gi·ªù h·ªçp", time(8, 0))
            noidung = st.text_area("üìù N·ªôi dung")
            files = st.file_uploader("üìé ƒê√≠nh k√®m", accept_multiple_files=True)
            submit = st.form_submit_button("üíæ L∆∞u cu·ªôc h·ªçp")
        if submit:
            try:
                file_names = []
                for f in files:
                    file_path = os.path.join(UPLOAD_FOLDER, f.name)
                    with open(file_path, "wb") as out:
                        out.write(f.read())
                    file_names.append(f.name)
                new_row = {
                    "Ng√†y": ngay.strftime("%d/%m/%y"),
                    "Gi·ªù": gio.strftime("%H:%M"),
                    "T√™n cu·ªôc h·ªçp": ten,
                    "N·ªôi dung": noidung,
                    "T·ªáp": ";".join(file_names)
                }
                df = pd.read_csv(MEETINGS_FILE) if os.path.exists(MEETINGS_FILE) else pd.DataFrame()
                df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                df.to_csv(MEETINGS_FILE, index=False)
                st.success("‚úÖ ƒê√£ l∆∞u cu·ªôc h·ªçp.")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå L·ªói khi l∆∞u cu·ªôc h·ªçp: {e}")
    
    # Hi·ªÉn th·ªã & Xo√° h·ªçp
    if os.path.exists(MEETINGS_FILE):
        st.subheader("üìö Danh s√°ch cu·ªôc h·ªçp")
        try:
            df = pd.read_csv(MEETINGS_FILE)
            for idx, row in df.iterrows():
                with st.expander(f"üìå {row['T√™n cu·ªôc h·ªçp']} ‚Äì {row['Ng√†y']} {row['Gi·ªù']}"):
                    st.write("üìù", row["N·ªôi dung"])
                    file_list = str(row.get("T·ªáp", "")).split(";")
                    for file in file_list:
                        file_path = os.path.join(UPLOAD_FOLDER, file)
                        if os.path.exists(file_path):
                            st.write(f"üìé {file}")
                            with open(file_path, "rb") as f:
                                st.download_button("‚¨áÔ∏è T·∫£i", f.read(), file_name=file, key=f"{file}_{idx}")
                    with st.form(f"form_xoa_{idx}"):
                        confirm = st.checkbox("üóëÔ∏è X√≥a", key=f"xoa_ck_{idx}")
                        do_delete = st.form_submit_button("‚ùó X√°c nh·∫≠n")
                        if confirm and do_delete:
                            df.drop(index=idx, inplace=True)
                            df.to_csv(MEETINGS_FILE, index=False)
                            st.success("üóëÔ∏è ƒê√£ xo√°.")
                            st.rerun()
        except Exception as e:
            st.error(f"‚ùå L·ªói khi hi·ªÉn th·ªã cu·ªôc h·ªçp: {e}")
    
    # Xu·∫•t / Nh·∫≠p Excel
    st.markdown("### üì§ Xu·∫•t / Nh·∫≠p Excel (Ph·ª•c v·ª• h·ªçp)")
    col3, col4 = st.columns(2)
    
    with col3:
        if os.path.exists(MEETINGS_FILE):
            df_export = pd.read_csv(MEETINGS_FILE)
            towrite2 = io.BytesIO()
            with pd.ExcelWriter(towrite2, engine='xlsxwriter') as writer:
                df_export.to_excel(writer, index=False, sheet_name='CuocHop')
            st.download_button("üì• T·∫£i Excel", data=towrite2.getvalue(), file_name="phuc_vu_hop.xlsx")
    
    with col4:
        file = st.file_uploader("üìÇ Nh·∫≠p t·ª´ Excel", type=["xlsx"], key="upload_hop")
        if file:
            try:
                df = pd.read_excel(file, dtype=str)
                df.to_csv(MEETINGS_FILE, index=False)
                st.success("‚úÖ ƒê√£ nh·∫≠p l·∫°i danh s√°ch.")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå L·ªói khi nh·∫≠p file Excel: {e}")
    import streamlit as st
    import pandas as pd
    import math
    import folium
    from folium.plugins import MarkerCluster
    from streamlit_folium import st_folium
    from datetime import datetime
    import zipfile
    import xml.etree.ElementTree as ET
    import json
    import os
    import io
    import re
    
    st.set_page_config(layout="wide")
    st.markdown("<style>html, body, [class*='css']  {font-size: 1.3em !important;}</style>", unsafe_allow_html=True)
    st.title("üìç D·ª± b√°o ƒëi·ªÉm s·ª± c·ªë")
    
    marker_locations = {}
    kmz_file = st.file_uploader("üìÇ T·∫£i file KMZ ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ªça ƒë·ªô c·ªôt", type="kmz")
    if kmz_file is not None:
        with zipfile.ZipFile(kmz_file, 'r') as z:
            for filename in z.namelist():
                if filename.endswith('.kml'):
                    with z.open(filename) as f:
                        tree = ET.parse(f)
                        root = tree.getroot()
                        ns = {'kml': 'http://www.opengis.net/kml/2.2'}
                        for pm in root.findall('.//kml:Placemark', ns):
                            name_tag = pm.find('kml:name', ns)
                            point = pm.find('.//kml:coordinates', ns)
                            if name_tag is not None and point is not None:
                                name = name_tag.text.strip()
                                coords = point.text.strip().split(',')
                                lon, lat = float(coords[0]), float(coords[1])
                                marker_locations[name] = (lat, lon)
        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(marker_locations)} ƒëi·ªÉm t·ª´ file KMZ.")
    
    st.subheader("üìù Nh·∫≠p c√°c v·ª• s·ª± c·ªë l·ªãch s·ª≠")
    uploaded_excel = st.file_uploader("üì• T·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ file Excel (.xlsx)", type="xlsx")
    if uploaded_excel is not None:
        try:
            df_uploaded = pd.read_excel(uploaded_excel)
            st.session_state.suco_data = df_uploaded.to_dict(orient="records")
            st.success("‚úÖ ƒê√£ n·∫°p d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ file th√†nh c√¥ng.")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file: {e}")
    
    if "suco_data" not in st.session_state:
        st.session_state.suco_data = []
    
    with st.form("suco_form"):
        col1, col2 = st.columns(2)
        with col1:
            ten_mc = st.text_input("T√™n m√°y c·∫Øt")
            ngay = st.date_input("Ng√†y x·∫£y ra s·ª± c·ªë", format="DD/MM/YYYY")
            dong_suco = st.text_input("D√≤ng s·ª± c·ªë (Ia, Ib, Ic, Io, 3Uo...)")
            loai_suco = st.selectbox("Lo·∫°i s·ª± c·ªë", [
                "1 pha ch·∫°m ƒë·∫•t (Io)",
                "2 pha ch·∫°m ƒë·∫•t (Ia+Ib)",
                "3 pha ch·∫°m ƒë·∫•t (Ia+Ib+Ic)",
                "Ng·∫Øn m·∫°ch 2 pha (Ia+Ib)",
                "Ng·∫Øn m·∫°ch 3 pha (Ia+Ib+Ic)",
                "Ng·∫Øn m·∫°ch 2 pha c√≥ Io (Ia+Ib+Io)",
                "Ng·∫Øn m·∫°ch 3 pha c√≥ Io (Ia+Ib+Ic+Io)",
                "Ng·∫Øn m·∫°ch 1 pha c√≥ Io (Ia+Io)",
                "Ng·∫Øn m·∫°ch 2 pha c√≥ Io (Ib+Ic+Io)",
                "Ng·∫Øn m·∫°ch 3 pha c√≥ Io (Ia+Ib+Ic+Io)"
            ])
        with col2:
            vi_tri = st.text_input("V·ªã tr√≠ s·ª± c·ªë")
            nguyen_nhan = st.text_input("Nguy√™n nh√¢n")
            thoi_tiet = st.text_input("Th·ªùi ti·∫øt")
    
        submitted = st.form_submit_button("L∆∞u v·ª• s·ª± c·ªë")
        if submitted:
            st.session_state.suco_data.append({
                "T√™n m√°y c·∫Øt": ten_mc,
                "Ng√†y": ngay.strftime("%d/%m/%Y"),
                "D√≤ng s·ª± c·ªë": dong_suco,
                "Lo·∫°i s·ª± c·ªë": loai_suco,
                "V·ªã tr√≠": vi_tri,
                "Nguy√™n nh√¢n": nguyen_nhan,
                "Th·ªùi ti·∫øt": thoi_tiet
            })
            st.success("‚úîÔ∏è ƒê√£ l∆∞u v·ª• s·ª± c·ªë!")
    
    if st.session_state.suco_data:
        st.write("### üìã Danh s√°ch s·ª± c·ªë ƒë√£ nh·∫≠p")
        df_suco = pd.DataFrame(st.session_state.suco_data)
        edited_df = st.data_editor(df_suco, num_rows="dynamic", use_container_width=True)
    
        if st.button("C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë√£ s·ª≠a"):
            st.session_state.suco_data = edited_df.to_dict(orient="records")
            st.success("‚úîÔ∏è ƒê√£ c·∫≠p nh·∫≠t danh s√°ch sau khi ch·ªânh s·ª≠a!")
    
        def convert_df(df):
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, sheet_name='SuCo', index=False)
            writer.close()
            return output.getvalue()
    
        st.download_button(
            label="üì§ Xu·∫•t b√°o c√°o Excel",
            data=convert_df(df_suco),
            file_name="bao_cao_su_co.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    
        df_suco.to_excel("du_lieu_su_co.xlsx", index=False)
    
elif mod_option == "D·ª± b√°o ƒëi·ªÉm s·ª± c·ªë":
    
    st.header("üìë Ph·ª•c v·ª• h·ªçp")
    
    with st.expander("‚ûï Th√™m cu·ªôc h·ªçp m·ªõi"):
        with st.form("form_hop"):
            ten = st.text_input("üìå T√™n cu·ªôc h·ªçp")
            ngay = st.date_input("üìÖ Ng√†y h·ªçp")
            gio = st.time_input("‚è∞ Gi·ªù h·ªçp", time(8, 0))
            noidung = st.text_area("üìù N·ªôi dung")
            files = st.file_uploader("üìé ƒê√≠nh k√®m", accept_multiple_files=True)
            submit = st.form_submit_button("üíæ L∆∞u cu·ªôc h·ªçp")
        if submit:
            try:
                file_names = []
                for f in files:
                    file_path = os.path.join(UPLOAD_FOLDER, f.name)
                    with open(file_path, "wb") as out:
                        out.write(f.read())
                    file_names.append(f.name)
                new_row = {
                    "Ng√†y": ngay.strftime("%d/%m/%y"),
                    "Gi·ªù": gio.strftime("%H:%M"),
                    "T√™n cu·ªôc h·ªçp": ten,
                    "N·ªôi dung": noidung,
                    "T·ªáp": ";".join(file_names)
                }
                df = pd.read_csv(MEETINGS_FILE) if os.path.exists(MEETINGS_FILE) else pd.DataFrame()
                df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                df.to_csv(MEETINGS_FILE, index=False)
                st.success("‚úÖ ƒê√£ l∆∞u cu·ªôc h·ªçp.")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå L·ªói khi l∆∞u cu·ªôc h·ªçp: {e}")
    
    # Hi·ªÉn th·ªã & Xo√° h·ªçp
    if os.path.exists(MEETINGS_FILE):
        st.subheader("üìö Danh s√°ch cu·ªôc h·ªçp")
        try:
            df = pd.read_csv(MEETINGS_FILE)
            for idx, row in df.iterrows():
                with st.expander(f"üìå {row['T√™n cu·ªôc h·ªçp']} ‚Äì {row['Ng√†y']} {row['Gi·ªù']}"):
                    st.write("üìù", row["N·ªôi dung"])
                    file_list = str(row.get("T·ªáp", "")).split(";")
                    for file in file_list:
                        file_path = os.path.join(UPLOAD_FOLDER, file)
                        if os.path.exists(file_path):
                            st.write(f"üìé {file}")
                            with open(file_path, "rb") as f:
                                st.download_button("‚¨áÔ∏è T·∫£i", f.read(), file_name=file, key=f"{file}_{idx}")
                    with st.form(f"form_xoa_{idx}"):
                        confirm = st.checkbox("üóëÔ∏è X√≥a", key=f"xoa_ck_{idx}")
                        do_delete = st.form_submit_button("‚ùó X√°c nh·∫≠n")
                        if confirm and do_delete:
                            df.drop(index=idx, inplace=True)
                            df.to_csv(MEETINGS_FILE, index=False)
                            st.success("üóëÔ∏è ƒê√£ xo√°.")
                            st.rerun()
        except Exception as e:
            st.error(f"‚ùå L·ªói khi hi·ªÉn th·ªã cu·ªôc h·ªçp: {e}")
    
    # Xu·∫•t / Nh·∫≠p Excel
    st.markdown("### üì§ Xu·∫•t / Nh·∫≠p Excel (Ph·ª•c v·ª• h·ªçp)")
    col3, col4 = st.columns(2)
    
    with col3:
        if os.path.exists(MEETINGS_FILE):
            df_export = pd.read_csv(MEETINGS_FILE)
            towrite2 = io.BytesIO()
            with pd.ExcelWriter(towrite2, engine='xlsxwriter') as writer:
                df_export.to_excel(writer, index=False, sheet_name='CuocHop')
            st.download_button("üì• T·∫£i Excel", data=towrite2.getvalue(), file_name="phuc_vu_hop.xlsx")
    
    with col4:
        file = st.file_uploader("üìÇ Nh·∫≠p t·ª´ Excel", type=["xlsx"], key="upload_hop")
        if file:
            try:
                df = pd.read_excel(file, dtype=str)
                df.to_csv(MEETINGS_FILE, index=False)
                st.success("‚úÖ ƒê√£ nh·∫≠p l·∫°i danh s√°ch.")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå L·ªói khi nh·∫≠p file Excel: {e}")
    import streamlit as st
    import pandas as pd
    import math
    import folium
    from folium.plugins import MarkerCluster
    from streamlit_folium import st_folium
    from datetime import datetime
    import zipfile
    import xml.etree.ElementTree as ET
    import json
    import os
    import io
    import re
    
    st.set_page_config(layout="wide")
    st.markdown("<style>html, body, [class*='css']  {font-size: 1.3em !important;}</style>", unsafe_allow_html=True)
    st.title("üìç D·ª± b√°o ƒëi·ªÉm s·ª± c·ªë")
    
    marker_locations = {}
    kmz_file = st.file_uploader("üìÇ T·∫£i file KMZ ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ªça ƒë·ªô c·ªôt", type="kmz")
    if kmz_file is not None:
        with zipfile.ZipFile(kmz_file, 'r') as z:
            for filename in z.namelist():
                if filename.endswith('.kml'):
                    with z.open(filename) as f:
                        tree = ET.parse(f)
                        root = tree.getroot()
                        ns = {'kml': 'http://www.opengis.net/kml/2.2'}
                        for pm in root.findall('.//kml:Placemark', ns):
                            name_tag = pm.find('kml:name', ns)
                            point = pm.find('.//kml:coordinates', ns)
                            if name_tag is not None and point is not None:
                                name = name_tag.text.strip()
                                coords = point.text.strip().split(',')
                                lon, lat = float(coords[0]), float(coords[1])
                                marker_locations[name] = (lat, lon)
        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(marker_locations)} ƒëi·ªÉm t·ª´ file KMZ.")
    
    st.subheader("üìù Nh·∫≠p c√°c v·ª• s·ª± c·ªë l·ªãch s·ª≠")
    uploaded_excel = st.file_uploader("üì• T·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ file Excel (.xlsx)", type="xlsx")
    if uploaded_excel is not None:
        try:
            df_uploaded = pd.read_excel(uploaded_excel)
            st.session_state.suco_data = df_uploaded.to_dict(orient="records")
            st.success("‚úÖ ƒê√£ n·∫°p d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ file th√†nh c√¥ng.")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file: {e}")
    
    if "suco_data" not in st.session_state:
        st.session_state.suco_data = []
    
    with st.form("suco_form"):
        col1, col2 = st.columns(2)
        with col1:
            ten_mc = st.text_input("T√™n m√°y c·∫Øt")
            ngay = st.date_input("Ng√†y x·∫£y ra s·ª± c·ªë", format="DD/MM/YYYY")
            dong_suco = st.text_input("D√≤ng s·ª± c·ªë (Ia, Ib, Ic, Io, 3Uo...)")
            loai_suco = st.selectbox("Lo·∫°i s·ª± c·ªë", [
                "1 pha ch·∫°m ƒë·∫•t (Io)",
                "2 pha ch·∫°m ƒë·∫•t (Ia+Ib)",
                "3 pha ch·∫°m ƒë·∫•t (Ia+Ib+Ic)",
                "Ng·∫Øn m·∫°ch 2 pha (Ia+Ib)",
                "Ng·∫Øn m·∫°ch 3 pha (Ia+Ib+Ic)",
                "Ng·∫Øn m·∫°ch 2 pha c√≥ Io (Ia+Ib+Io)",
                "Ng·∫Øn m·∫°ch 3 pha c√≥ Io (Ia+Ib+Ic+Io)",
                "Ng·∫Øn m·∫°ch 1 pha c√≥ Io (Ia+Io)",
                "Ng·∫Øn m·∫°ch 2 pha c√≥ Io (Ib+Ic+Io)",
                "Ng·∫Øn m·∫°ch 3 pha c√≥ Io (Ia+Ib+Ic+Io)"
            ])
        with col2:
            vi_tri = st.text_input("V·ªã tr√≠ s·ª± c·ªë")
            nguyen_nhan = st.text_input("Nguy√™n nh√¢n")
            thoi_tiet = st.text_input("Th·ªùi ti·∫øt")
    
        submitted = st.form_submit_button("L∆∞u v·ª• s·ª± c·ªë")
        if submitted:
            st.session_state.suco_data.append({
                "T√™n m√°y c·∫Øt": ten_mc,
                "Ng√†y": ngay.strftime("%d/%m/%Y"),
                "D√≤ng s·ª± c·ªë": dong_suco,
                "Lo·∫°i s·ª± c·ªë": loai_suco,
                "V·ªã tr√≠": vi_tri,
                "Nguy√™n nh√¢n": nguyen_nhan,
                "Th·ªùi ti·∫øt": thoi_tiet
            })
            st.success("‚úîÔ∏è ƒê√£ l∆∞u v·ª• s·ª± c·ªë!")
    
    if st.session_state.suco_data:
        st.write("### üìã Danh s√°ch s·ª± c·ªë ƒë√£ nh·∫≠p")
        df_suco = pd.DataFrame(st.session_state.suco_data)
        edited_df = st.data_editor(df_suco, num_rows="dynamic", use_container_width=True)
    
        if st.button("C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë√£ s·ª≠a"):
            st.session_state.suco_data = edited_df.to_dict(orient="records")
            st.success("‚úîÔ∏è ƒê√£ c·∫≠p nh·∫≠t danh s√°ch sau khi ch·ªânh s·ª≠a!")
    
        def convert_df(df):
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, sheet_name='SuCo', index=False)
            writer.close()
            return output.getvalue()
    
        st.download_button(
            label="üì§ Xu·∫•t b√°o c√°o Excel",
            data=convert_df(df_suco),
            file_name="bao_cao_su_co.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    
        df_suco.to_excel("du_lieu_su_co.xlsx", index=False)
    