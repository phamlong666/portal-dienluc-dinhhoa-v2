import streamlit as st
import pandas as pd
import math
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import st_folium
from datetime import datetime
import zipfile
import xml.etree.ElementTree as ET
import json
import os
import io

st.set_page_config(layout="wide")
st.markdown("<style>html, body, [class*='css']  {font-size: 1.3em !important;}</style>", unsafe_allow_html=True)
st.title("üìç D·ª± b√°o ƒëi·ªÉm s·ª± c·ªë")

# ==============================
# ==============================
# 1. N√öT T·∫¢I FILE KMZ
# ==============================
marker_locations = {}
kmz_file = st.file_uploader("üìÇ T·∫£i file KMZ ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ªça ƒë·ªô c·ªôt", type="kmz")
if kmz_file is not None:
    with zipfile.ZipFile(kmz_file, 'r') as z:
        for filename in z.namelist():
            if filename.endswith('.kml'):
                with z.open(filename) as f:
                    tree = ET.parse(f)
                    root = tree.getroot()
                    ns = {'kml': 'http://www.opengis.net/kml/2.2'}
                    for pm in root.findall('.//kml:Placemark', ns):
                        name_tag = pm.find('kml:name', ns)
                        point = pm.find('.//kml:coordinates', ns)
                        if name_tag is not None and point is not None:
                            name = name_tag.text.strip()
                            coords = point.text.strip().split(',')
                            lon, lat = float(coords[0]), float(coords[1])
                            marker_locations[name] = (lat, lon)
    st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(marker_locations)} ƒëi·ªÉm t·ª´ file KMZ.")

# ==============================
# NH·∫¨P D·ªÆ LI·ªÜU L·ªäCH S·ª¨ S·ª∞ C·ªê (PT2)
# ==============================
st.subheader("üìù Nh·∫≠p c√°c v·ª• s·ª± c·ªë l·ªãch s·ª≠")

if "suco_data" not in st.session_state:
    st.session_state.suco_data = []

with st.form("suco_form"):
    col1, col2 = st.columns(2)
    with col1:
        ten_mc = st.text_input("T√™n m√°y c·∫Øt")
        ngay = st.date_input("Ng√†y x·∫£y ra s·ª± c·ªë", format="DD/MM/YYYY")
        dong_suco = st.text_input("D√≤ng s·ª± c·ªë (Ia, Ib, Ic, Io, 3Uo...)")
    with col2:
        vi_tri = st.text_input("V·ªã tr√≠ s·ª± c·ªë")
        nguyen_nhan = st.text_input("Nguy√™n nh√¢n")
        thoi_tiet = st.text_input("Th·ªùi ti·∫øt")

    submitted = st.form_submit_button("L∆∞u v·ª• s·ª± c·ªë")
    if submitted:
        st.session_state.suco_data.append({
            "T√™n m√°y c·∫Øt": ten_mc,
            "Ng√†y": ngay.strftime("%d/%m/%Y"),
            "D√≤ng s·ª± c·ªë": dong_suco,
            "V·ªã tr√≠": vi_tri,
            "Nguy√™n nh√¢n": nguyen_nhan,
            "Th·ªùi ti·∫øt": thoi_tiet
        })
        st.success("‚úîÔ∏è ƒê√£ l∆∞u v·ª• s·ª± c·ªë!")

if st.session_state.suco_data:
    st.write("### üìã Danh s√°ch s·ª± c·ªë ƒë√£ nh·∫≠p")
    df_suco = pd.DataFrame(st.session_state.suco_data)
    edited_df = st.data_editor(df_suco, num_rows="dynamic", use_container_width=True)

    if st.button("C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë√£ s·ª≠a"):
        st.session_state.suco_data = edited_df.to_dict(orient="records")
        st.success("‚úîÔ∏è ƒê√£ c·∫≠p nh·∫≠t danh s√°ch sau khi ch·ªânh s·ª≠a!")

    def convert_df(df):
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, sheet_name='SuCo', index=False)
        writer.close()
        return output.getvalue()

    st.download_button(
        label="üì§ Xu·∫•t b√°o c√°o Excel",
        data=convert_df(df_suco),
        file_name="bao_cao_su_co.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    df_suco.to_excel("du_lieu_su_co.xlsx", index=False)

# ==============================
# 2. NH·∫¨P T√äN MC + D√íNG S·ª∞ C·ªê ƒê·ªÇ D·ª∞ B√ÅO [PT1, PT2]
# ==============================
st.subheader("üìå Ph√¢n t√≠ch s·ª± c·ªë t·ªïng h·ª£p")

col_a, col_b = st.columns(2)
with col_a:
    ten_mc_new = st.text_input("üîß Nh·∫≠p t√™n m√°y c·∫Øt ƒë·ªÉ l·ªçc tuy·∫øn (v√≠ d·ª•: MC471, MC472)")
with col_b:
    dong_input = st.text_input("üîå Nh·∫≠p d√≤ng s·ª± c·ªë (v√≠ d·ª•: Ia=1032; Ib=928; Ic=112; Io=400)")

if st.button("üîé Ph√¢n t√≠ch s·ª± c·ªë t·ªïng h·ª£p"):
    if dong_input and ten_mc_new:
        try:
            dong_raw = dong_input.replace(';', ' ').replace(',', ' ')
            dong_raw = dong_raw.replace('Ia=', '').replace('Ib=', '').replace('Ic=', '').replace('Io=', '').replace('In=', '').replace('3Uo=', '')
            values = [float(s.strip()) for s in dong_raw.split() if s.strip().replace('.', '', 1).isdigit()]

            if len(values) >= 3:
                tong_dong = sum(values[:3])

                # PT1: marker g·∫ßn ƒë√∫ng
                min_dist = float('inf')
                predicted_marker = None
                for name, (lat, lon) in marker_locations.items():
                    if ten_mc_new in name:
                        approx_score = abs(hash(name) % 1000 - tong_dong)
                        if approx_score < min_dist:
                            min_dist = approx_score
                            predicted_marker = (name, lat, lon)
                if predicted_marker:
                    st.success(f"[PT1] V·ªã tr√≠ g·∫ßn nh·∫•t theo ƒë∆∞·ªùng d√¢y: {predicted_marker[0]}")
                    pt_markers.append((predicted_marker[1], predicted_marker[2], f"[PT1] {predicted_marker[0]}"))

                # PT2: so s√°nh l·ªãch s·ª≠
                if "suco_data" in st.session_state:
                    matched = None
                    min_diff = float('inf')
                    for row in st.session_state.suco_data:
                        if ten_mc_new.lower() in row['T√™n m√°y c·∫Øt'].lower():
                            hist_raw = row['D√≤ng s·ª± c·ªë'].replace(';', ' ').replace(',', ' ')
                            hist_raw = hist_raw.replace('Ia=', '').replace('Ib=', '').replace('Ic=', '').replace('Io=', '').replace('In=', '')
                            vals = [float(s.strip()) for s in hist_raw.split() if s.strip().replace('.', '', 1).isdigit()]
                            if len(vals) >= 3:
                                diff = sum(abs(a - b) for a, b in zip(values[:3], vals[:3]))
                                if diff < min_diff:
                                    min_diff = diff
                                    matched = row
                    if matched:
                        st.info(f"[PT2] G·∫ßn nh·∫•t theo l·ªãch s·ª≠: {matched['V·ªã tr√≠']} ({matched['Ng√†y']})")
            else:
                st.warning("‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu d√≤ng s·ª± c·ªë")
        except Exception as e:
            st.error(f"‚ùå L·ªói x·ª≠ l√Ω PT1/PT2: {e}")

m = None  # kh·ªüi t·∫°o b·∫£n ƒë·ªì ƒë·ªÉ gh√©p c√°c PT l√™n chung
pt_markers = []

# ==============================
# 4. D·ª∞ B√ÅO V·ªä TR√ç S·ª∞ C·ªê THEO PH∆Ø∆†NG √ÅN [PT3] - T·ªîNG TR·ªû
# ==============================
st.subheader("üßÆ [PT3] D·ª± b√°o theo t·ªïng tr·ªü v√† d√≤ng s·ª± c·ªë")

st.markdown("üëâ Nh·∫≠p t√™n ƒë∆∞·ªùng d√¢y v√† d√≤ng s·ª± c·ªë ƒë·ªÉ t√≠nh to√°n kho·∫£ng c√°ch ƒë·∫øn ƒëi·ªÉm s·ª± c·ªë.")

col1, col2 = st.columns(2)
with col1:
    ten_duongday = st.text_input("üîå Nh·∫≠p t√™n ƒë∆∞·ªùng d√¢y (v√≠ d·ª•: 471 E6.22)")
with col2:
    dong_suco_pt3 = st.text_input("üìà Nh·∫≠p d√≤ng s·ª± c·ªë (v√≠ d·ª•: Ia=1032; Ib=928; Ic=112)")

uploaded_qlkt = st.file_uploader("üìé T·∫£i file ch·ª©a sheet QLKT (Excel)", type="xlsx")

if st.button("üìä Ph√¢n t√≠ch t·ªïng tr·ªü") and uploaded_qlkt and ten_duongday and dong_suco_pt3:
    try:
        sheet_names = pd.ExcelFile(uploaded_qlkt).sheet_names
        target_sheet = next((s for s in sheet_names if s.strip().lower() == "qlkt"), None)
        if not target_sheet:
            st.error("‚ùå Sheet 'QLKT' kh√¥ng t·ªìn t·∫°i trong file.")
            raise ValueError("Missing QLKT sheet")
        df_qlkt = pd.read_excel(uploaded_qlkt, sheet_name=target_sheet)
        row = df_qlkt[df_qlkt["T√™n ƒë∆∞·ªùng d√¢y"].astype(str).str.contains(ten_duongday, case=False)]
        if not row.empty:
            chieu_dai_km = float(row.iloc[0]["File/s·ªë li·ªáu ƒë√£ g·ª≠i"].split("chi·ªÅu d√†i ")[1].split("km")[0].strip())
            chieu_dai_m = chieu_dai_km * 1000
            tiet_dien = 70  # gi·∫£ ƒë·ªãnh d√¢y AC70
            dien_tro_suat = 0.028  # Œ©¬∑mm¬≤/m (nh√¥m)
            z = round(dien_tro_suat * chieu_dai_m / tiet_dien, 2)

            dong_raw = dong_suco_pt3.replace(';', ' ').replace(',', ' ')
            dong_raw = dong_raw.replace('Ia=', '').replace('Ib=', '').replace('Ic=', '')
            values = [float(s.strip()) for s in dong_raw.split() if s.strip().replace('.', '', 1).isdigit()]

            if len(values) >= 3:
                if len(values) >= 4:
                    # V·ªõi trung t√≠nh n·ªëi ƒë·∫•t tr·ª±c ti·∫øp, n·∫øu ch·∫°m ƒë·∫•t th√¨ l·∫•y d√≤ng Io
                    tong_dong = values[3]  # d√≤ng Io
                else:
                    tong_dong = sum(values[:3])  # n·∫øu kh√¥ng ƒë·ªß th√¨ l·∫•y t·ªïng 3 pha
                u_dinh_muc = 22000  # 22kV
                kc_m = round((u_dinh_muc / tong_dong) * z, 2)
                so_cot = int(kc_m // 80)

                st.success(f"üìè T·ªïng tr·ªü Z = {z} Œ© | D√≤ng s·ª± c·ªë: {tong_dong} A")
                st.info(f"üìå D·ª± b√°o kho·∫£ng c√°ch ƒë·∫øn ƒëi·ªÉm s·ª± c·ªë: {kc_m} m ‚Üí kho·∫£ng c·ªôt th·ª© {so_cot}")

                # Th√™m marker PT3 v√†o b·∫£n ƒë·ªì chung
                if marker_locations:
                    for name, (lat, lon) in marker_locations.items():
                        if ten_duongday.replace(' ', '').split('.')[0][-3:] in name:
                            pt_markers.append((lat, lon, f"[PT3] C·ªôt g·∫ßn {so_cot}"))
                            break

                # ==============================
# X·ª¨ L√ù L·ªñI marker_locations N·∫æU CH∆ØA ƒê∆Ø·ª¢C KHAI B√ÅO
# ==============================
                if "marker_locations" not in globals():
                    marker_locations = {}

# Kh·ªüi t·∫°o b·∫£n ƒë·ªì n·∫øu ch∆∞a c√≥
                if not m and pt_markers:
                    m = folium.Map(location=pt_markers[0][:2], zoom_start=14)

                # G·∫Øn t·∫•t c·∫£ marker PT v√†o b·∫£n ƒë·ªì
                for lat, lon, label in pt_markers:
                    folium.Marker(
                        location=[lat, lon],
                        popup=label,
                        icon=folium.Icon(color='green')
                    ).add_to(m)

                if m:
                    st_folium(m, width=900, height=500)
            else:
                st.warning("‚ö†Ô∏è D·ªØ li·ªáu d√≤ng s·ª± c·ªë ch∆∞a ƒë·ªß ƒë·ªÉ t√≠nh to√°n")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆∞·ªùng d√¢y trong sheet QLKT")
    except Exception as e:
        st.error(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")
