import streamlit as st
import pandas as pd
import math
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import st_folium
from datetime import datetime
import zipfile
import xml.etree.ElementTree as ET
import json
import os
import io
import re

st.set_page_config(layout="wide")
st.markdown("<style>html, body, [class*='css']  {font-size: 1.3em !important;}</style>", unsafe_allow_html=True)
st.title("üìç D·ª± b√°o ƒëi·ªÉm s·ª± c·ªë")

marker_locations = {}
kmz_file = st.file_uploader("üìÇ T·∫£i file KMZ ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ªça ƒë·ªô c·ªôt", type="kmz")
if kmz_file is not None:
    with zipfile.ZipFile(kmz_file, 'r') as z:
        for filename in z.namelist():
            if filename.endswith('.kml'):
                with z.open(filename) as f:
                    tree = ET.parse(f)
                    root = tree.getroot()
                    ns = {'kml': 'http://www.opengis.net/kml/2.2'}
                    for pm in root.findall('.//kml:Placemark', ns):
                        name_tag = pm.find('kml:name', ns)
                        point = pm.find('.//kml:coordinates', ns)
                        if name_tag is not None and point is not None:
                            name = name_tag.text.strip()
                            coords = point.text.strip().split(',')
                            lon, lat = float(coords[0]), float(coords[1])
                            marker_locations[name] = (lat, lon)
    st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(marker_locations)} ƒëi·ªÉm t·ª´ file KMZ.")

st.subheader("üìù Nh·∫≠p c√°c v·ª• s·ª± c·ªë l·ªãch s·ª≠")
uploaded_excel = st.file_uploader("üì• T·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ file Excel (.xlsx)", type="xlsx")
if uploaded_excel is not None:
    try:
        df_uploaded = pd.read_excel(uploaded_excel)
        st.session_state.suco_data = df_uploaded.to_dict(orient="records")
        st.success("‚úÖ ƒê√£ n·∫°p d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ file th√†nh c√¥ng.")
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file: {e}")

if "suco_data" not in st.session_state:
    st.session_state.suco_data = []

with st.form("suco_form"):
    col1, col2 = st.columns(2)
    with col1:
        ten_mc = st.text_input("T√™n m√°y c·∫Øt")
        ngay = st.date_input("Ng√†y x·∫£y ra s·ª± c·ªë", format="DD/MM/YYYY")
        dong_suco = st.text_input("D√≤ng s·ª± c·ªë (Ia, Ib, Ic, Io, 3Uo...)")
        loai_suco = st.selectbox("Lo·∫°i s·ª± c·ªë", [
            "1 pha ch·∫°m ƒë·∫•t (Io)",
            "2 pha ch·∫°m ƒë·∫•t (Ia+Ib)",
            "3 pha ch·∫°m ƒë·∫•t (Ia+Ib+Ic)",
            "Ng·∫Øn m·∫°ch 2 pha (Ia+Ib)",
            "Ng·∫Øn m·∫°ch 3 pha (Ia+Ib+Ic)",
            "Ng·∫Øn m·∫°ch 2 pha c√≥ Io (Ia+Ib+Io)",
            "Ng·∫Øn m·∫°ch 3 pha c√≥ Io (Ia+Ib+Ic+Io)",
            "Ng·∫Øn m·∫°ch 1 pha c√≥ Io (Ia+Io)",
            "Ng·∫Øn m·∫°ch 2 pha c√≥ Io (Ib+Ic+Io)",
            "Ng·∫Øn m·∫°ch 3 pha c√≥ Io (Ia+Ib+Ic+Io)"
        ])
    with col2:
        vi_tri = st.text_input("V·ªã tr√≠ s·ª± c·ªë")
        nguyen_nhan = st.text_input("Nguy√™n nh√¢n")
        thoi_tiet = st.text_input("Th·ªùi ti·∫øt")

    submitted = st.form_submit_button("L∆∞u v·ª• s·ª± c·ªë")
    if submitted:
        st.session_state.suco_data.append({
            "T√™n m√°y c·∫Øt": ten_mc,
            "Ng√†y": ngay.strftime("%d/%m/%Y"),
            "D√≤ng s·ª± c·ªë": dong_suco,
            "Lo·∫°i s·ª± c·ªë": loai_suco,
            "V·ªã tr√≠": vi_tri,
            "Nguy√™n nh√¢n": nguyen_nhan,
            "Th·ªùi ti·∫øt": thoi_tiet
        })
        st.success("‚úîÔ∏è ƒê√£ l∆∞u v·ª• s·ª± c·ªë!")

if st.session_state.suco_data:
    st.write("### üìã Danh s√°ch s·ª± c·ªë ƒë√£ nh·∫≠p")
    df_suco = pd.DataFrame(st.session_state.suco_data)
    edited_df = st.data_editor(df_suco, num_rows="dynamic", use_container_width=True)

    if st.button("C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë√£ s·ª≠a"):
        st.session_state.suco_data = edited_df.to_dict(orient="records")
        st.success("‚úîÔ∏è ƒê√£ c·∫≠p nh·∫≠t danh s√°ch sau khi ch·ªânh s·ª≠a!")

    def convert_df(df):
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, sheet_name='SuCo', index=False)
        writer.close()
        return output.getvalue()

    st.download_button(
        label="üì§ Xu·∫•t b√°o c√°o Excel",
        data=convert_df(df_suco),
        file_name="bao_cao_su_co.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    df_suco.to_excel("du_lieu_su_co.xlsx", index=False)

# ============================
# T√çNH TO√ÅN KHO·∫¢NG C√ÅCH S·ª∞ C·ªê
# ============================
def extract_current(dong_suco_str, loai_suco):
    try:
        values = re.findall(r'\d+', dong_suco_str)
        values = [int(v) for v in values]
        if not values:
            return None
        if "Io" in loai_suco:
            return values[-1]  # m·∫∑c ƒë·ªãnh Io l√† cu·ªëi
        else:
            return sum(values)
    except:
        return None

def tinh_khoang_cach(I_suco, U0_kV, z_ohm_per_km):
    try:
        U0 = U0_kV * 1000  # ƒê√£ l√† ƒëi·ªán √°p pha
        return round((U0 / (I_suco * z_ohm_per_km)), 2)
    except:
        return None

st.subheader("üîç D·ª± b√°o ƒëi·ªÉm s·ª± c·ªë t·ª´ d√≤ng ƒëi·ªán")
ten_mc_input = st.text_input("T√™n m√°y c·∫Øt mu·ªën d·ª± b√°o")
dong_input = st.text_input("D√≤ng s·ª± c·ªë (v√≠ d·ª•: Ia=500, Ib=600, Ic=50, Io=400)")
cap_dien_ap = st.selectbox("C·∫•p ƒëi·ªán √°p ƒë∆∞·ªùng d√¢y", ["22kV", "35kV", "110kV"])
loai_suco_input = st.selectbox("Lo·∫°i s·ª± c·ªë", [
    "1 pha ch·∫°m ƒë·∫•t (Io)",
    "2 pha ch·∫°m ƒë·∫•t (Ia+Ib)",
    "3 pha ch·∫°m ƒë·∫•t (Ia+Ib+Ic)",
    "Ng·∫Øn m·∫°ch 2 pha (Ia+Ib)",
    "Ng·∫Øn m·∫°ch 3 pha (Ia+Ib+Ic)",
    "Ng·∫Øn m·∫°ch 2 pha c√≥ Io (Ia+Ib+Io)",
    "Ng·∫Øn m·∫°ch 3 pha c√≥ Io (Ia+Ib+Ic+Io)",
    "Ng·∫Øn m·∫°ch 1 pha c√≥ Io (Ia+Io)",
    "Ng·∫Øn m·∫°ch 2 pha c√≥ Io (Ib+Ic+Io)",
    "Ng·∫Øn m·∫°ch 3 pha c√≥ Io (Ia+Ib+Ic+Io)"
])

if st.button("Ph√¢n t√≠ch"):
    U0_map = {"22kV": 22000 / math.sqrt(3), "35kV": 35000 / math.sqrt(3), "110kV": 110000 / math.sqrt(3)}
    z_default = 0.3  # su·∫•t tr·ªü m·∫∑c ƒë·ªãnh
    I = extract_current(dong_input, loai_suco_input)
    if I:
        d = tinh_khoang_cach(I, U0_map[cap_dien_ap], z_default)
        if d:
            st.success(f"‚úÖ Kho·∫£ng c√°ch d·ª± ki·∫øn ƒë·∫øn ƒëi·ªÉm s·ª± c·ªë: {d} km")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√≠nh ƒë∆∞·ª£c kho·∫£ng c√°ch.")
    else:
        st.warning("‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c d√≤ng s·ª± c·ªë h·ª£p l·ªá.")

# B·ªî SUNG: D·ª± b√°o t·ª´ d·ªØ li·ªáu l·ªãch s·ª≠
st.subheader("üìö D·ª± b√°o ƒëi·ªÉm s·ª± c·ªë t·ª´ d·ªØ li·ªáu l·ªãch s·ª≠")
ten_mc_ls = st.text_input("üîé Nh·∫≠p t√™n m√°y c·∫Øt ƒë·ªÉ l·ªçc d·ªØ li·ªáu")
dong_moi = st.text_input("Nh·∫≠p d√≤ng s·ª± c·ªë m·ªõi (Ia, Ib, Ic, Io)")
if dong_moi:
    try:
        input_values = [int(x.strip()) for x in re.findall(r'\d+', dong_moi)]
        def euclidean(a, b):
            return math.sqrt(sum((x - y) ** 2 for x, y in zip(a, b)))

        min_dist = float('inf')
        nearest_case = None
        for case in st.session_state.suco_data:
            try:
                if ten_mc_ls and ten_mc_ls not in case.get("T√™n m√°y c·∫Øt", ""):
                    continue
                case_values = [int(x.strip()) for x in re.findall(r'\d+', case["D√≤ng s·ª± c·ªë"])]
                if len(case_values) == len(input_values):
                    dist = euclidean(input_values, case_values)
                    if dist < min_dist:
                        min_dist = dist
                        nearest_case = case
            except:
                continue

        if nearest_case:
            st.success(f"‚úÖ D·ª± b√°o g·∫ßn nh·∫•t theo l·ªãch s·ª≠: {nearest_case['V·ªã tr√≠']} ‚Äì Nguy√™n nh√¢n: {nearest_case['Nguy√™n nh√¢n']}")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d√≤ng s·ª± c·ªë t∆∞∆°ng ƒë·ªìng trong d·ªØ li·ªáu l·ªãch s·ª≠.")
    except:
        st.warning("‚ö†Ô∏è ƒê·ªãnh d·∫°ng d√≤ng s·ª± c·ªë kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo d·∫°ng: 500, 600, 50, 400")
