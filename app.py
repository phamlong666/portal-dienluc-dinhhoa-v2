
import streamlit as st
import pandas as pd
import plotly.graph_objects as go

st.set_page_config(page_title="B√°o c√°o t·ªïn th·∫•t TBA", layout="wide")
st.title("üì• T·∫£i d·ªØ li·ªáu ƒë·∫ßu v√†o - B√°o c√°o t·ªïn th·∫•t")

# === N√∫t l√†m m·ªõi ===
if st.button("üîÑ L√†m m·ªõi"):
    st.session_state.clear()
    st.experimental_rerun()

with st.expander("üîå T·ªïn th·∫•t c√°c TBA c√¥ng c·ªông"):
    upload_tba_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - Theo th√°ng", type=["xlsx"], key="tba_thang")

    if upload_tba_thang is not None:
        try:
            xls = pd.ExcelFile(upload_tba_thang)
            sheet_names = xls.sheet_names

            sheet_target = None
            for s in sheet_names:
                if s.strip().lower() == "b·∫£ng k·∫øt qu·∫£ √°nh x·∫° d·ªØ li·ªáu".lower():
                    sheet_target = s
                    break

            if sheet_target is None:
                st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y sheet 'B·∫£ng K·∫øt qu·∫£ √°nh x·∫° d·ªØ li·ªáu'. Sheet hi·ªán c√≥: {sheet_names}")
            else:
                # L·∫•y th√°ng/nƒÉm t·ª´ d√≤ng ƒë·∫ßu ti√™n c·ªßa Sheet1
                try:
                    df_info = pd.read_excel(upload_tba_thang, sheet_name="Sheet1", nrows=1, header=None)
                    thong_tin_thang = df_info.iloc[0, 0] if not df_info.empty else ""
                except:
                    thong_tin_thang = ""

                df = xls.parse(sheet_target)

                # Format d·ªØ li·ªáu: gi·ªØ 2 s·ªë sau d·∫•u ph·∫©y cho t·ª∑ l·ªá, c√≥ . ngƒÉn c√°ch ngh√¨n
                def format_number(x):
                    try:
                        return f"{int(x):,}".replace(",", ".")
                    except:
                        return x

                df["T·ª∑ l·ªá t·ªïn th·∫•t (%)"] = df["T·ª∑ l·ªá t·ªïn th·∫•t (%)"].map(lambda x: f"{float(x):.2f}".replace(".", ",") if pd.notna(x) else "")
                if "So s√°nh (%)" in df.columns:
                    df["So s√°nh (%)"] = df["So s√°nh (%)"].map(lambda x: f"{float(x):.2f}".replace(".", ",") if pd.notna(x) else "")
                if "ƒêi·ªán nh·∫≠n (kWh)" in df.columns:
                    df["ƒêi·ªán nh·∫≠n (kWh)"] = df["ƒêi·ªán nh·∫≠n (kWh)"].map(format_number)
                if "Th∆∞∆°ng ph·∫©m (kWh)" in df.columns:
                    df["Th∆∞∆°ng ph·∫©m (kWh)"] = df["Th∆∞∆°ng ph·∫©m (kWh)"].map(format_number)
                if "ƒêi·ªán t·ªïn th·∫•t (kWh)" in df.columns:
                    df["ƒêi·ªán t·ªïn th·∫•t (kWh)"] = df["ƒêi·ªán t·ªïn th·∫•t (kWh)"].map(format_number)

                with st.expander("üìã Xem b·∫£ng d·ªØ li·ªáu ƒë√£ √°nh x·∫°", expanded=False):
                    st.dataframe(df)

                # Ph√¢n lo·∫°i t·ªïn th·∫•t
                def phan_loai(x):
                    try:
                        x = float(x)
                    except:
                        return "Kh√¥ng r√µ"
                    if x < 2:
                        return "<2%"
                    elif x < 3:
                        return ">=2 v√† <3%"
                    elif x < 4:
                        return ">=3 v√† <4%"
                    elif x < 5:
                        return ">=4 v√† <5%"
                    elif x < 7:
                        return ">=5 v√† <7%"
                    else:
                        return ">=7%"

                df["Ng∆∞·ª°ng"] = df["T·ª∑ l·ªá t·ªïn th·∫•t (%)"].apply(phan_loai)
                tong_theo_nguong = df["Ng∆∞·ª°ng"].value_counts().reindex(
                    ["<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"],
                    fill_value=0
                )

                colors = {
                    "<2%": "steelblue",
                    ">=2 v√† <3%": "darkorange",
                    ">=3 v√† <4%": "forestgreen",
                    ">=4 v√† <5%": "goldenrod",
                    ">=5 v√† <7%": "teal",
                    ">=7%": "crimson"
                }

                col1, col2 = st.columns([2, 2])
                with col1:
                    st.markdown(f"#### üìä S·ªë l∆∞·ª£ng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t {thong_tin_thang}")
                    fig_bar = go.Figure()
                    for nguong, color in colors.items():
                        fig_bar.add_trace(go.Bar(
                            name=nguong,
                            x=["Th·ª±c hi·ªán"],
                            y=[tong_theo_nguong[nguong]],
                            marker_color=color,
                            text=[tong_theo_nguong[nguong]],
                            textposition="outside",
                            textfont=dict(size=14, color="black")
                        ))
                    fig_bar.update_layout(
                        barmode='group',
                        xaxis_title="",
                        yaxis_title="S·ªë l∆∞·ª£ng TBA",
                        height=400,
                        font=dict(color="black", size=14),
                        showlegend=False
                    )
                    st.plotly_chart(fig_bar, use_container_width=True)

                with col2:
                    st.markdown(f"#### üß© T·ª∑ tr·ªçng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t {thong_tin_thang}")
                    fig_pie = go.Figure(data=[
                        go.Pie(
                            labels=list(colors.keys()),
                            values=[tong_theo_nguong[k] for k in colors.keys()],
                            marker=dict(colors=list(colors.values())),
                            hole=0.5,
                            textinfo='percent+label',
                            textfont=dict(size=14, color="black")
                        )
                    ])
                    fig_pie.update_layout(
                        annotations=[dict(text=f"T·ªïng s·ªë TBA<br><b>{df.shape[0]}</b>", x=0.5, y=0.5, font_size=16, showarrow=False, font_color="black")],
                        height=400,
                        font=dict(color="black", size=14)
                    )
                    st.plotly_chart(fig_pie, use_container_width=True)

        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file: {e}")
