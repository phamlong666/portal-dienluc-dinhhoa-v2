# ‚úÖ C·∫≠p nh·∫≠t b·∫£n x·ª≠ l√Ω l·ªói KeyError, tƒÉng font ch·ªØ b·∫£ng, b·ªï sung bi·ªÉu ƒë·ªì n√¢ng cao v√† n√∫t t·∫£i b√°o c√°o

from pathlib import Path
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
from docx import Document
from docx.shared import Pt

st.set_page_config(page_title="B√°o c√°o t·ªïn th·∫•t TBA", layout="wide")
st.title("üìä B√°o c√°o t·ªïn th·∫•t c√°c TBA c√¥ng c·ªông")

# ====== Session State ======
if "uploaded_data" not in st.session_state:
    st.session_state.uploaded_data = {"Theo Th√°ng": None, "L≈©y k·∫ø": None, "C√πng k·ª≥": None}

# ====== H√†m ƒë·ªçc file √°nh x·∫° ======
def read_mapping_sheet(uploaded_file):
    try:
        xls = pd.ExcelFile(uploaded_file)
        sheet_name = [s for s in xls.sheet_names if "√°nh x·∫°" in s.lower()][0]
        df = pd.read_excel(xls, sheet_name=sheet_name)

        df.columns = df.columns.str.strip()
        percent_cols = [col for col in df.columns if "%" in col or "t·ª∑ l·ªá" in col.lower()]
        for col in percent_cols:
            df[col] = pd.to_numeric(
                df[col].astype(str).str.replace("%", "", regex=False).str.replace(",", ".", regex=False),
                errors="coerce")

        return df
    except Exception as e:
        st.warning(f"L·ªói ƒë·ªçc file {uploaded_file.name}: {e}")
        return None

# ====== T·∫£i d·ªØ li·ªáu ======
col1, col2, col3 = st.columns(3)
with col1:
    file_thang = st.file_uploader("üìÖ T·∫£i File Theo Th√°ng", type="xlsx")
    if file_thang: st.session_state.uploaded_data["Theo Th√°ng"] = file_thang
with col2:
    file_luyke = st.file_uploader("üìä T·∫£i File L≈©y K·∫ø", type="xlsx")
    if file_luyke: st.session_state.uploaded_data["L≈©y k·∫ø"] = file_luyke
with col3:
    file_cungky = st.file_uploader("üìà T·∫£i File C√πng K·ª≥", type="xlsx")
    if file_cungky: st.session_state.uploaded_data["C√πng k·ª≥"] = file_cungky

# ====== L√†m m·ªõi d·ªØ li·ªáu ======
if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu"):
    st.session_state.uploaded_data = {"Theo Th√°ng": None, "L≈©y k·∫ø": None, "C√πng k·ª≥": None}
    st.experimental_rerun()

# ====== H√†m t√≠nh to√°n t·ªâ l·ªá t·ªïn th·∫•t ======
def calc_overall_rate(df):
    col_dien_nhan = [col for col in df.columns if "ƒëi·ªán nh·∫≠n" in col.lower()][0]
    col_ton_that = [col for col in df.columns if "t·ªïn th·∫•t" in col.lower() and "kwh" in col.lower()][0]
    total_input = df[col_dien_nhan].sum()
    total_loss = df[col_ton_that].sum()
    actual = (total_loss / total_input * 100) if total_input else 0.0
    col_kh = [col for col in df.columns if "k·∫ø ho·∫°ch" in col.lower()]
    plan = df[col_kh[0]].mean() if col_kh else 0.0
    return round(actual, 2), round(plan, 2)

# ====== Hi·ªÉn th·ªã d·ªØ li·ªáu v√† bi·ªÉu ƒë·ªì ======
for label, file in st.session_state.uploaded_data.items():
    if file:
        df = read_mapping_sheet(file)
        st.markdown(f"<h3 style='font-size:26px;'>üìÇ D·ªØ li·ªáu t·ªïn th·∫•t - {label}</h3>", unsafe_allow_html=True)
        with st.expander(f"üìã M·ªü r·ªông b·∫£ng - {label}", expanded=True):
            st.dataframe(df.style.set_table_styles([
                {'selector': 'th', 'props': [('font-size', '18px')]},
                {'selector': 'td', 'props': [('font-size', '16px')]},
            ]), height=300, use_container_width=True)

        actual, plan = calc_overall_rate(df)
        fig, ax = plt.subplots(figsize=(2, 1.2))
        bars = ax.bar(["Th·ª±c hi·ªán", "K·∫ø ho·∫°ch"], [actual, plan], color=["#1976D2", "#FFC107"])
        ax.set_ylim(0, max(actual, plan) * 1.5 + 1)
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, height + 0.1, f"{height:.2f}%", ha='center', fontsize=8)
        st.pyplot(fig)

# ====== T·ªïng h·ª£p v√† T·∫£i b√°o c√°o ======
if any(st.session_state.uploaded_data.values()):
    combined_df = pd.DataFrame()
    for label, file in st.session_state.uploaded_data.items():
        if file:
            df = read_mapping_sheet(file)
            df["Lo·∫°i"] = label
            combined_df = pd.concat([combined_df, df], ignore_index=True)

    st.markdown("<h3 style='font-size:26px;'>üìä So s√°nh t·ªïn th·∫•t t·ªïng h·ª£p</h3>", unsafe_allow_html=True)
    st.dataframe(combined_df, height=350, use_container_width=True)

    # ====== N√∫t t·∫£i b√°o c√°o Word ======
    if st.button("üì• T·∫£i b√°o c√°o Word"):
        doc = Document()
        doc.add_heading("B√°o c√°o t·ªïn th·∫•t TBA c√¥ng c·ªông", level=1)
        t = doc.add_table(rows=1, cols=len(combined_df.columns))
        hdr_cells = t.rows[0].cells
        for i, col in enumerate(combined_df.columns):
            hdr_cells[i].text = str(col)
        for _, row in combined_df.iterrows():
            row_cells = t.add_row().cells
            for i, val in enumerate(row):
                row_cells[i].text = str(val)
        buffer = io.BytesIO()
        doc.save(buffer)
        st.download_button("üìÑ T·∫£i b√°o c√°o Word", buffer.getvalue(), file_name="bao_cao_ton_that.docx")
